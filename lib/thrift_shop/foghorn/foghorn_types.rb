#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module ThriftShop
  module Foghorn
    module ApnsEventType
      ATTEMPT = 1
      ACCEPT = 2
      OPEN = 3
      PROCESSING_ERROR = 4
      MISSING_DEVICE_TOKEN = 5
      MISSING_TOPIC = 6
      MISSING_PAYLOAD = 7
      INVALID_TOKEN_SIZE = 8
      INVALID_TOPIC_SIZE = 9
      INVALID_PAYLOAD_SIZE = 10
      INVALID_TOKEN = 11
      SHUTDOWN = 12
      UNKNOWN_ERROR = 13
      VALUE_MAP = {1 => "ATTEMPT", 2 => "ACCEPT", 3 => "OPEN", 4 => "PROCESSING_ERROR", 5 => "MISSING_DEVICE_TOKEN", 6 => "MISSING_TOPIC", 7 => "MISSING_PAYLOAD", 8 => "INVALID_TOKEN_SIZE", 9 => "INVALID_TOPIC_SIZE", 10 => "INVALID_PAYLOAD_SIZE", 11 => "INVALID_TOKEN", 12 => "SHUTDOWN", 13 => "UNKNOWN_ERROR"}
      VALID_VALUES = Set.new([ATTEMPT, ACCEPT, OPEN, PROCESSING_ERROR, MISSING_DEVICE_TOKEN, MISSING_TOPIC, MISSING_PAYLOAD, INVALID_TOKEN_SIZE, INVALID_TOPIC_SIZE, INVALID_PAYLOAD_SIZE, INVALID_TOKEN, SHUTDOWN, UNKNOWN_ERROR]).freeze
    end

    module GcmEventType
      ATTEMPT = 1
      ACCEPT = 2
      OPEN = 3
      MISSING_REGISTRATION = 4
      INVALID_REGISTRATION = 5
      MISMATCH_SENDER_ID = 6
      NOT_REGISTERED = 7
      MESSAGE_TOO_BIG = 8
      INVALID_DATA_KEY = 9
      INVALID_TTL = 10
      UNAVAILABLE = 11
      INTERNAL_SERVER_ERROR = 12
      INVALID_PACKAGE_NAME = 13
      EXPIRED_REGISTRATION_ID = 14
      MALFORMED_MESSAGE = 15
      UNAUTHORIZED_SENDER = 16
      UNKNOWN_ERROR = 17
      VALUE_MAP = {1 => "ATTEMPT", 2 => "ACCEPT", 3 => "OPEN", 4 => "MISSING_REGISTRATION", 5 => "INVALID_REGISTRATION", 6 => "MISMATCH_SENDER_ID", 7 => "NOT_REGISTERED", 8 => "MESSAGE_TOO_BIG", 9 => "INVALID_DATA_KEY", 10 => "INVALID_TTL", 11 => "UNAVAILABLE", 12 => "INTERNAL_SERVER_ERROR", 13 => "INVALID_PACKAGE_NAME", 14 => "EXPIRED_REGISTRATION_ID", 15 => "MALFORMED_MESSAGE", 16 => "UNAUTHORIZED_SENDER", 17 => "UNKNOWN_ERROR"}
      VALID_VALUES = Set.new([ATTEMPT, ACCEPT, OPEN, MISSING_REGISTRATION, INVALID_REGISTRATION, MISMATCH_SENDER_ID, NOT_REGISTERED, MESSAGE_TOO_BIG, INVALID_DATA_KEY, INVALID_TTL, UNAVAILABLE, INTERNAL_SERVER_ERROR, INVALID_PACKAGE_NAME, EXPIRED_REGISTRATION_ID, MALFORMED_MESSAGE, UNAUTHORIZED_SENDER, UNKNOWN_ERROR]).freeze
    end

    module OnsiteNotificationEventType
      ATTEMPT = 1
      ACCEPT = 2
      OPEN = 3
      CLICK = 4
      CLIENT_SERVER_ERROR = 5
      CLIENT_ERROR = 6
      SERVER_ERROR = 7
      UNKNOWN_ERROR = 8
      VALUE_MAP = {1 => "ATTEMPT", 2 => "ACCEPT", 3 => "OPEN", 4 => "CLICK", 5 => "CLIENT_SERVER_ERROR", 6 => "CLIENT_ERROR", 7 => "SERVER_ERROR", 8 => "UNKNOWN_ERROR"}
      VALID_VALUES = Set.new([ATTEMPT, ACCEPT, OPEN, CLICK, CLIENT_SERVER_ERROR, CLIENT_ERROR, SERVER_ERROR, UNKNOWN_ERROR]).freeze
    end

    module EmailEventType
      ACCEPT = 1
      ATTEMPT = 2
      BOUNCE = 3
      CLICK = 4
      COMPLAIN = 5
      CONVERT = 6
      DELIVER = 7
      DROP = 8
      MTA_FAIL = 9
      OPEN = 10
      PERM_FAIL = 11
      REJECT = 12
      UNSUBSCRIBE = 13
      UNSUBSCRIBE_CLICK = 14
      MTA_UNKNOWN_RESPONSE = 15
      VALUE_MAP = {1 => "ACCEPT", 2 => "ATTEMPT", 3 => "BOUNCE", 4 => "CLICK", 5 => "COMPLAIN", 6 => "CONVERT", 7 => "DELIVER", 8 => "DROP", 9 => "MTA_FAIL", 10 => "OPEN", 11 => "PERM_FAIL", 12 => "REJECT", 13 => "UNSUBSCRIBE", 14 => "UNSUBSCRIBE_CLICK", 15 => "MTA_UNKNOWN_RESPONSE"}
      VALID_VALUES = Set.new([ACCEPT, ATTEMPT, BOUNCE, CLICK, COMPLAIN, CONVERT, DELIVER, DROP, MTA_FAIL, OPEN, PERM_FAIL, REJECT, UNSUBSCRIBE, UNSUBSCRIBE_CLICK, MTA_UNKNOWN_RESPONSE]).freeze
    end

    class EventType < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def email_event_type(val)
          EventType.new(:email_event_type, val)
        end

        def apns_event_type(val)
          EventType.new(:apns_event_type, val)
        end

        def gcm_event_type(val)
          EventType.new(:gcm_event_type, val)
        end

        def onsite_notification_event_type(val)
          EventType.new(:onsite_notification_event_type, val)
        end
      end

      EMAIL_EVENT_TYPE = 1
      APNS_EVENT_TYPE = 2
      GCM_EVENT_TYPE = 3
      ONSITE_NOTIFICATION_EVENT_TYPE = 4

      FIELDS = {
        EMAIL_EVENT_TYPE => {:type => ::Thrift::Types::I32, :name => 'email_event_type', :optional => true, :enum_class => ::ThriftShop::Foghorn::EmailEventType},
        APNS_EVENT_TYPE => {:type => ::Thrift::Types::I32, :name => 'apns_event_type', :optional => true, :enum_class => ::ThriftShop::Foghorn::ApnsEventType},
        GCM_EVENT_TYPE => {:type => ::Thrift::Types::I32, :name => 'gcm_event_type', :optional => true, :enum_class => ::ThriftShop::Foghorn::GcmEventType},
        ONSITE_NOTIFICATION_EVENT_TYPE => {:type => ::Thrift::Types::I32, :name => 'onsite_notification_event_type', :optional => true, :enum_class => ::ThriftShop::Foghorn::OnsiteNotificationEventType}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
        if get_set_field == :email_event_type
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field email_event_type!') unless ::ThriftShop::Foghorn::EmailEventType::VALID_VALUES.include?(get_value)
        end
        if get_set_field == :apns_event_type
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field apns_event_type!') unless ::ThriftShop::Foghorn::ApnsEventType::VALID_VALUES.include?(get_value)
        end
        if get_set_field == :gcm_event_type
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field gcm_event_type!') unless ::ThriftShop::Foghorn::GcmEventType::VALID_VALUES.include?(get_value)
        end
        if get_set_field == :onsite_notification_event_type
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field onsite_notification_event_type!') unless ::ThriftShop::Foghorn::OnsiteNotificationEventType::VALID_VALUES.include?(get_value)
        end
      end

      ::Thrift::Union.generate_accessors self
    end

    class Tag
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NAME = 1

      FIELDS = {
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Event
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UUID = 1
      MESSAGE_ID = 2
      TIMESTAMP = 3
      EVENT_TYPE = 4
      TAGS = 5

      FIELDS = {
        UUID => {:type => ::Thrift::Types::STRING, :name => 'uuid', :optional => true},
        MESSAGE_ID => {:type => ::Thrift::Types::STRING, :name => 'message_id', :optional => true},
        TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp', :optional => true},
        EVENT_TYPE => {:type => ::Thrift::Types::STRUCT, :name => 'event_type', :class => ::ThriftShop::Foghorn::EventType, :optional => true},
        TAGS => {:type => ::Thrift::Types::SET, :name => 'tags', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Foghorn::Tag}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
