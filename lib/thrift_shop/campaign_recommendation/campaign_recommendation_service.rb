#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/campaign_recommendation/campaign_recommendation_types'

module ThriftShop
  module CampaignRecommendation
    module CampaignRecommendationService
      class Client
        include ::Thrift::Client

        def create_rule(headers, request)
          send_create_rule(headers, request)
          return recv_create_rule()
        end

        def send_create_rule(headers, request)
          send_message('create_rule', Create_rule_args, :headers => headers, :request => request)
        end

        def recv_create_rule()
          result = receive_message(Create_rule_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_rule failed: unknown result')
        end

        def delete_rule(headers, request)
          send_delete_rule(headers, request)
          recv_delete_rule()
        end

        def send_delete_rule(headers, request)
          send_message('delete_rule', Delete_rule_args, :headers => headers, :request => request)
        end

        def recv_delete_rule()
          result = receive_message(Delete_rule_result)
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          return
        end

        def get_campaign_recommendations(headers, request)
          send_get_campaign_recommendations(headers, request)
          return recv_get_campaign_recommendations()
        end

        def send_get_campaign_recommendations(headers, request)
          send_message('get_campaign_recommendations', Get_campaign_recommendations_args, :headers => headers, :request => request)
        end

        def recv_get_campaign_recommendations()
          result = receive_message(Get_campaign_recommendations_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_campaign_recommendations failed: unknown result')
        end

        def get_rules(headers, request)
          send_get_rules(headers, request)
          return recv_get_rules()
        end

        def send_get_rules(headers, request)
          send_message('get_rules', Get_rules_args, :headers => headers, :request => request)
        end

        def recv_get_rules()
          result = receive_message(Get_rules_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_rules failed: unknown result')
        end

        def receive_event_bus_message_parcel(headers, message_parcel)
          send_receive_event_bus_message_parcel(headers, message_parcel)
          recv_receive_event_bus_message_parcel()
        end

        def send_receive_event_bus_message_parcel(headers, message_parcel)
          send_message('receive_event_bus_message_parcel', Receive_event_bus_message_parcel_args, :headers => headers, :message_parcel => message_parcel)
        end

        def recv_receive_event_bus_message_parcel()
          result = receive_message(Receive_event_bus_message_parcel_result)
          return
        end

        def update_rule(headers, request)
          send_update_rule(headers, request)
          return recv_update_rule()
        end

        def send_update_rule(headers, request)
          send_message('update_rule', Update_rule_args, :headers => headers, :request => request)
        end

        def recv_update_rule()
          result = receive_message(Update_rule_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'update_rule failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_create_rule(seqid, iprot, oprot)
          args = read_args(iprot, Create_rule_args)
          result = Create_rule_result.new()
          begin
            result.success = @handler.create_rule(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'create_rule', seqid)
        end

        def process_delete_rule(seqid, iprot, oprot)
          args = read_args(iprot, Delete_rule_args)
          result = Delete_rule_result.new()
          begin
            @handler.delete_rule(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'delete_rule', seqid)
        end

        def process_get_campaign_recommendations(seqid, iprot, oprot)
          args = read_args(iprot, Get_campaign_recommendations_args)
          result = Get_campaign_recommendations_result.new()
          begin
            result.success = @handler.get_campaign_recommendations(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_campaign_recommendations', seqid)
        end

        def process_get_rules(seqid, iprot, oprot)
          args = read_args(iprot, Get_rules_args)
          result = Get_rules_result.new()
          begin
            result.success = @handler.get_rules(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_rules', seqid)
        end

        def process_receive_event_bus_message_parcel(seqid, iprot, oprot)
          args = read_args(iprot, Receive_event_bus_message_parcel_args)
          result = Receive_event_bus_message_parcel_result.new()
          @handler.receive_event_bus_message_parcel(args.headers, args.message_parcel)
          write_result(result, oprot, 'receive_event_bus_message_parcel', seqid)
        end

        def process_update_rule(seqid, iprot, oprot)
          args = read_args(iprot, Update_rule_args)
          result = Update_rule_result.new()
          begin
            result.success = @handler.update_rule(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'update_rule', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Create_rule_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CampaignRecommendation::CreateRuleRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_rule_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CampaignRecommendation::CampaignRecommendationRule},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_rule_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CampaignRecommendation::DeleteRuleRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_rule_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_recommendations_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CampaignRecommendation::GetCampaignRecommendationsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_recommendations_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CampaignRecommendation::CampaignRecommendation}},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_rules_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CampaignRecommendation::GetRulesRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_rules_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CampaignRecommendation::CampaignRecommendationRule}},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Receive_event_bus_message_parcel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        MESSAGE_PARCEL = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          MESSAGE_PARCEL => {:type => ::Thrift::Types::STRUCT, :name => 'message_parcel', :class => ::ThriftShop::EventBus::MessageParcel}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Receive_event_bus_message_parcel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Update_rule_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CampaignRecommendation::UpdateRuleRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Update_rule_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CampaignRecommendation::CampaignRecommendationRule},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
