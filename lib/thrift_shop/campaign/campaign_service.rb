#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/campaign/campaign_types'

module ThriftShop
  module Campaign
    module CampaignService
      class Client
        include ::Thrift::Client

        def create_campaign(headers, request)
          send_create_campaign(headers, request)
          return recv_create_campaign()
        end

        def send_create_campaign(headers, request)
          send_message('create_campaign', Create_campaign_args, :headers => headers, :request => request)
        end

        def recv_create_campaign()
          result = receive_message(Create_campaign_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_campaign failed: unknown result')
        end

        def edit_campaign(headers, request)
          send_edit_campaign(headers, request)
          return recv_edit_campaign()
        end

        def send_edit_campaign(headers, request)
          send_message('edit_campaign', Edit_campaign_args, :headers => headers, :request => request)
        end

        def recv_edit_campaign()
          result = receive_message(Edit_campaign_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'edit_campaign failed: unknown result')
        end

        def get_campaigns(headers, request)
          send_get_campaigns(headers, request)
          return recv_get_campaigns()
        end

        def send_get_campaigns(headers, request)
          send_message('get_campaigns', Get_campaigns_args, :headers => headers, :request => request)
        end

        def recv_get_campaigns()
          result = receive_message(Get_campaigns_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_campaigns failed: unknown result')
        end

        def add_petition(headers, request)
          send_add_petition(headers, request)
          recv_add_petition()
        end

        def send_add_petition(headers, request)
          send_message('add_petition', Add_petition_args, :headers => headers, :request => request)
        end

        def recv_add_petition()
          result = receive_message(Add_petition_result)
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          return
        end

        def get_petition_uids(headers, request)
          send_get_petition_uids(headers, request)
          return recv_get_petition_uids()
        end

        def send_get_petition_uids(headers, request)
          send_message('get_petition_uids', Get_petition_uids_args, :headers => headers, :request => request)
        end

        def recv_get_petition_uids()
          result = receive_message(Get_petition_uids_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_petition_uids failed: unknown result')
        end

        def get_supporter_uids(headers, request)
          send_get_supporter_uids(headers, request)
          return recv_get_supporter_uids()
        end

        def send_get_supporter_uids(headers, request)
          send_message('get_supporter_uids', Get_supporter_uids_args, :headers => headers, :request => request)
        end

        def recv_get_supporter_uids()
          result = receive_message(Get_supporter_uids_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_supporter_uids failed: unknown result')
        end

        def launch_campaign(headers, request)
          send_launch_campaign(headers, request)
          return recv_launch_campaign()
        end

        def send_launch_campaign(headers, request)
          send_message('launch_campaign', Launch_campaign_args, :headers => headers, :request => request)
        end

        def recv_launch_campaign()
          result = receive_message(Launch_campaign_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'launch_campaign failed: unknown result')
        end

        def receive_event_bus_message_parcel(headers, message_parcel)
          send_receive_event_bus_message_parcel(headers, message_parcel)
          recv_receive_event_bus_message_parcel()
        end

        def send_receive_event_bus_message_parcel(headers, message_parcel)
          send_message('receive_event_bus_message_parcel', Receive_event_bus_message_parcel_args, :headers => headers, :message_parcel => message_parcel)
        end

        def recv_receive_event_bus_message_parcel()
          result = receive_message(Receive_event_bus_message_parcel_result)
          return
        end

        def get_campaign_for_petition(headers, request)
          send_get_campaign_for_petition(headers, request)
          return recv_get_campaign_for_petition()
        end

        def send_get_campaign_for_petition(headers, request)
          send_message('get_campaign_for_petition', Get_campaign_for_petition_args, :headers => headers, :request => request)
        end

        def recv_get_campaign_for_petition()
          result = receive_message(Get_campaign_for_petition_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_campaign_for_petition failed: unknown result')
        end

        def create_campaign_update(headers, request)
          send_create_campaign_update(headers, request)
          return recv_create_campaign_update()
        end

        def send_create_campaign_update(headers, request)
          send_message('create_campaign_update', Create_campaign_update_args, :headers => headers, :request => request)
        end

        def recv_create_campaign_update()
          result = receive_message(Create_campaign_update_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_campaign_update failed: unknown result')
        end

        def edit_campaign_update(headers, request)
          send_edit_campaign_update(headers, request)
          return recv_edit_campaign_update()
        end

        def send_edit_campaign_update(headers, request)
          send_message('edit_campaign_update', Edit_campaign_update_args, :headers => headers, :request => request)
        end

        def recv_edit_campaign_update()
          result = receive_message(Edit_campaign_update_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'edit_campaign_update failed: unknown result')
        end

        def delete_campaign_update(headers, request)
          send_delete_campaign_update(headers, request)
          recv_delete_campaign_update()
        end

        def send_delete_campaign_update(headers, request)
          send_message('delete_campaign_update', Delete_campaign_update_args, :headers => headers, :request => request)
        end

        def recv_delete_campaign_update()
          result = receive_message(Delete_campaign_update_result)
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          return
        end

        def get_campaign_updates(headers, request)
          send_get_campaign_updates(headers, request)
          return recv_get_campaign_updates()
        end

        def send_get_campaign_updates(headers, request)
          send_message('get_campaign_updates', Get_campaign_updates_args, :headers => headers, :request => request)
        end

        def recv_get_campaign_updates()
          result = receive_message(Get_campaign_updates_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_campaign_updates failed: unknown result')
        end

        def create_campaign_poll(headers, request)
          send_create_campaign_poll(headers, request)
          return recv_create_campaign_poll()
        end

        def send_create_campaign_poll(headers, request)
          send_message('create_campaign_poll', Create_campaign_poll_args, :headers => headers, :request => request)
        end

        def recv_create_campaign_poll()
          result = receive_message(Create_campaign_poll_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_campaign_poll failed: unknown result')
        end

        def get_campaign_polls(headers, request)
          send_get_campaign_polls(headers, request)
          return recv_get_campaign_polls()
        end

        def send_get_campaign_polls(headers, request)
          send_message('get_campaign_polls', Get_campaign_polls_args, :headers => headers, :request => request)
        end

        def recv_get_campaign_polls()
          result = receive_message(Get_campaign_polls_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_campaign_polls failed: unknown result')
        end

        def get_campaign_polls_by_identifiers(headers, request)
          send_get_campaign_polls_by_identifiers(headers, request)
          return recv_get_campaign_polls_by_identifiers()
        end

        def send_get_campaign_polls_by_identifiers(headers, request)
          send_message('get_campaign_polls_by_identifiers', Get_campaign_polls_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_campaign_polls_by_identifiers()
          result = receive_message(Get_campaign_polls_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_campaign_polls_by_identifiers failed: unknown result')
        end

        def trigger_campaign_poll_notification(headers, request)
          send_trigger_campaign_poll_notification(headers, request)
          recv_trigger_campaign_poll_notification()
        end

        def send_trigger_campaign_poll_notification(headers, request)
          send_message('trigger_campaign_poll_notification', Trigger_campaign_poll_notification_args, :headers => headers, :request => request)
        end

        def recv_trigger_campaign_poll_notification()
          result = receive_message(Trigger_campaign_poll_notification_result)
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          return
        end

        def create_campaign_supporter(headers, request)
          send_create_campaign_supporter(headers, request)
          return recv_create_campaign_supporter()
        end

        def send_create_campaign_supporter(headers, request)
          send_message('create_campaign_supporter', Create_campaign_supporter_args, :headers => headers, :request => request)
        end

        def recv_create_campaign_supporter()
          result = receive_message(Create_campaign_supporter_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_campaign_supporter failed: unknown result')
        end

        def delete_campaign_supporter(headers, request)
          send_delete_campaign_supporter(headers, request)
          recv_delete_campaign_supporter()
        end

        def send_delete_campaign_supporter(headers, request)
          send_message('delete_campaign_supporter', Delete_campaign_supporter_args, :headers => headers, :request => request)
        end

        def recv_delete_campaign_supporter()
          result = receive_message(Delete_campaign_supporter_result)
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          return
        end

        def get_supported_campaign_uids(headers, request)
          send_get_supported_campaign_uids(headers, request)
          return recv_get_supported_campaign_uids()
        end

        def send_get_supported_campaign_uids(headers, request)
          send_message('get_supported_campaign_uids', Get_supported_campaign_uids_args, :headers => headers, :request => request)
        end

        def recv_get_supported_campaign_uids()
          result = receive_message(Get_supported_campaign_uids_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_supported_campaign_uids failed: unknown result')
        end

        def get_ideology_buckets(headers, request)
          send_get_ideology_buckets(headers, request)
          return recv_get_ideology_buckets()
        end

        def send_get_ideology_buckets(headers, request)
          send_message('get_ideology_buckets', Get_ideology_buckets_args, :headers => headers, :request => request)
        end

        def recv_get_ideology_buckets()
          result = receive_message(Get_ideology_buckets_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_ideology_buckets failed: unknown result')
        end

        def get_campaign_supporters(headers, request)
          send_get_campaign_supporters(headers, request)
          return recv_get_campaign_supporters()
        end

        def send_get_campaign_supporters(headers, request)
          send_message('get_campaign_supporters', Get_campaign_supporters_args, :headers => headers, :request => request)
        end

        def recv_get_campaign_supporters()
          result = receive_message(Get_campaign_supporters_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_campaign_supporters failed: unknown result')
        end

        def get_event_uids(headers, request)
          send_get_event_uids(headers, request)
          return recv_get_event_uids()
        end

        def send_get_event_uids(headers, request)
          send_message('get_event_uids', Get_event_uids_args, :headers => headers, :request => request)
        end

        def recv_get_event_uids()
          result = receive_message(Get_event_uids_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_event_uids failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_create_campaign(seqid, iprot, oprot)
          args = read_args(iprot, Create_campaign_args)
          result = Create_campaign_result.new()
          begin
            result.success = @handler.create_campaign(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'create_campaign', seqid)
        end

        def process_edit_campaign(seqid, iprot, oprot)
          args = read_args(iprot, Edit_campaign_args)
          result = Edit_campaign_result.new()
          begin
            result.success = @handler.edit_campaign(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'edit_campaign', seqid)
        end

        def process_get_campaigns(seqid, iprot, oprot)
          args = read_args(iprot, Get_campaigns_args)
          result = Get_campaigns_result.new()
          begin
            result.success = @handler.get_campaigns(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_campaigns', seqid)
        end

        def process_add_petition(seqid, iprot, oprot)
          args = read_args(iprot, Add_petition_args)
          result = Add_petition_result.new()
          begin
            @handler.add_petition(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'add_petition', seqid)
        end

        def process_get_petition_uids(seqid, iprot, oprot)
          args = read_args(iprot, Get_petition_uids_args)
          result = Get_petition_uids_result.new()
          begin
            result.success = @handler.get_petition_uids(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_petition_uids', seqid)
        end

        def process_get_supporter_uids(seqid, iprot, oprot)
          args = read_args(iprot, Get_supporter_uids_args)
          result = Get_supporter_uids_result.new()
          begin
            result.success = @handler.get_supporter_uids(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_supporter_uids', seqid)
        end

        def process_launch_campaign(seqid, iprot, oprot)
          args = read_args(iprot, Launch_campaign_args)
          result = Launch_campaign_result.new()
          begin
            result.success = @handler.launch_campaign(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'launch_campaign', seqid)
        end

        def process_receive_event_bus_message_parcel(seqid, iprot, oprot)
          args = read_args(iprot, Receive_event_bus_message_parcel_args)
          result = Receive_event_bus_message_parcel_result.new()
          @handler.receive_event_bus_message_parcel(args.headers, args.message_parcel)
          write_result(result, oprot, 'receive_event_bus_message_parcel', seqid)
        end

        def process_get_campaign_for_petition(seqid, iprot, oprot)
          args = read_args(iprot, Get_campaign_for_petition_args)
          result = Get_campaign_for_petition_result.new()
          begin
            result.success = @handler.get_campaign_for_petition(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_campaign_for_petition', seqid)
        end

        def process_create_campaign_update(seqid, iprot, oprot)
          args = read_args(iprot, Create_campaign_update_args)
          result = Create_campaign_update_result.new()
          begin
            result.success = @handler.create_campaign_update(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'create_campaign_update', seqid)
        end

        def process_edit_campaign_update(seqid, iprot, oprot)
          args = read_args(iprot, Edit_campaign_update_args)
          result = Edit_campaign_update_result.new()
          begin
            result.success = @handler.edit_campaign_update(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'edit_campaign_update', seqid)
        end

        def process_delete_campaign_update(seqid, iprot, oprot)
          args = read_args(iprot, Delete_campaign_update_args)
          result = Delete_campaign_update_result.new()
          begin
            @handler.delete_campaign_update(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'delete_campaign_update', seqid)
        end

        def process_get_campaign_updates(seqid, iprot, oprot)
          args = read_args(iprot, Get_campaign_updates_args)
          result = Get_campaign_updates_result.new()
          begin
            result.success = @handler.get_campaign_updates(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_campaign_updates', seqid)
        end

        def process_create_campaign_poll(seqid, iprot, oprot)
          args = read_args(iprot, Create_campaign_poll_args)
          result = Create_campaign_poll_result.new()
          begin
            result.success = @handler.create_campaign_poll(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          end
          write_result(result, oprot, 'create_campaign_poll', seqid)
        end

        def process_get_campaign_polls(seqid, iprot, oprot)
          args = read_args(iprot, Get_campaign_polls_args)
          result = Get_campaign_polls_result.new()
          begin
            result.success = @handler.get_campaign_polls(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          end
          write_result(result, oprot, 'get_campaign_polls', seqid)
        end

        def process_get_campaign_polls_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_campaign_polls_by_identifiers_args)
          result = Get_campaign_polls_by_identifiers_result.new()
          begin
            result.success = @handler.get_campaign_polls_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          end
          write_result(result, oprot, 'get_campaign_polls_by_identifiers', seqid)
        end

        def process_trigger_campaign_poll_notification(seqid, iprot, oprot)
          args = read_args(iprot, Trigger_campaign_poll_notification_args)
          result = Trigger_campaign_poll_notification_result.new()
          begin
            @handler.trigger_campaign_poll_notification(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'trigger_campaign_poll_notification', seqid)
        end

        def process_create_campaign_supporter(seqid, iprot, oprot)
          args = read_args(iprot, Create_campaign_supporter_args)
          result = Create_campaign_supporter_result.new()
          begin
            result.success = @handler.create_campaign_supporter(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          end
          write_result(result, oprot, 'create_campaign_supporter', seqid)
        end

        def process_delete_campaign_supporter(seqid, iprot, oprot)
          args = read_args(iprot, Delete_campaign_supporter_args)
          result = Delete_campaign_supporter_result.new()
          begin
            @handler.delete_campaign_supporter(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          end
          write_result(result, oprot, 'delete_campaign_supporter', seqid)
        end

        def process_get_supported_campaign_uids(seqid, iprot, oprot)
          args = read_args(iprot, Get_supported_campaign_uids_args)
          result = Get_supported_campaign_uids_result.new()
          begin
            result.success = @handler.get_supported_campaign_uids(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_supported_campaign_uids', seqid)
        end

        def process_get_ideology_buckets(seqid, iprot, oprot)
          args = read_args(iprot, Get_ideology_buckets_args)
          result = Get_ideology_buckets_result.new()
          begin
            result.success = @handler.get_ideology_buckets(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_ideology_buckets', seqid)
        end

        def process_get_campaign_supporters(seqid, iprot, oprot)
          args = read_args(iprot, Get_campaign_supporters_args)
          result = Get_campaign_supporters_result.new()
          begin
            result.success = @handler.get_campaign_supporters(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_campaign_supporters', seqid)
        end

        def process_get_event_uids(seqid, iprot, oprot)
          args = read_args(iprot, Get_event_uids_args)
          result = Get_event_uids_result.new()
          begin
            result.success = @handler.get_event_uids(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_event_uids', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Create_campaign_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::CreateCampaignRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_campaign_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::Campaign},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_campaign_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::EditCampaignRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_campaign_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::Campaign},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaigns_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetCampaignsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaigns_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::PaginatedCampaigns},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Add_petition_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::AddPetitionRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Add_petition_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_uids_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetPetitionUidsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_uids_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_supporter_uids_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetSupporterUidsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_supporter_uids_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::PaginatedSupporterUids},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Launch_campaign_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::LaunchCampaignRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Launch_campaign_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::Campaign},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Receive_event_bus_message_parcel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        MESSAGE_PARCEL = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          MESSAGE_PARCEL => {:type => ::Thrift::Types::STRUCT, :name => 'message_parcel', :class => ::ThriftShop::EventBus::MessageParcel}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Receive_event_bus_message_parcel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_for_petition_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetCampaignForPetitionRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_for_petition_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::Campaign},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_campaign_update_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::CreateCampaignUpdateRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_campaign_update_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::CampaignUpdate},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_campaign_update_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::EditCampaignUpdateRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_campaign_update_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::CampaignUpdate},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_campaign_update_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::DeleteCampaignUpdateRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_campaign_update_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_updates_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetCampaignUpdatesRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_updates_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::PaginatedCampaignUpdates},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_campaign_poll_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::CreateCampaignPollRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_campaign_poll_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        STATE_EXCEPTION = 3

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::CampaignPoll},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_polls_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetCampaignPollsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_polls_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        STATE_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::PaginatedCampaignPolls},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_polls_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetCampaignPollsByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_polls_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        STATE_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::CampaignPolls},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Trigger_campaign_poll_notification_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::TriggerCampaignPollNotificationRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Trigger_campaign_poll_notification_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_campaign_supporter_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::CreateCampaignSupporterRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_campaign_supporter_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        STATE_EXCEPTION = 3

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::CampaignSupporter},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_campaign_supporter_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::DeleteCampaignSupporterRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_campaign_supporter_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        STATE_EXCEPTION = 3

        FIELDS = {
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_supported_campaign_uids_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetSupportedCampaignUidsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_supported_campaign_uids_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::PaginatedCampaignUids},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_ideology_buckets_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetIdeologyBucketsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_ideology_buckets_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::Campaign::IdeologyBucket}},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_supporters_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetCampaignSupportersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_campaign_supporters_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::PaginatedCampaignSupporters},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_event_uids_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Campaign::GetEventUidsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_event_uids_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Campaign::PaginatedEventUids},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
