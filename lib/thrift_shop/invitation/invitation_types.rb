#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/shared/shared_types'


module ThriftShop
  module Invitation
    module InvitationTypeName
      TOPIC_COMPARE_INVITATION = 1
      PAL_TOPIC_COMPARE_INVITATION = 2
      JOIN_GROUP_INVITATION = 3
      SIGN_PETITION_INVITATION = 4
      VALUE_MAP = {1 => "TOPIC_COMPARE_INVITATION", 2 => "PAL_TOPIC_COMPARE_INVITATION", 3 => "JOIN_GROUP_INVITATION", 4 => "SIGN_PETITION_INVITATION"}
      VALID_VALUES = Set.new([TOPIC_COMPARE_INVITATION, PAL_TOPIC_COMPARE_INVITATION, JOIN_GROUP_INVITATION, SIGN_PETITION_INVITATION]).freeze
    end

    class InviteeUid < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def entity_uuid(val)
          InviteeUid.new(:entity_uuid, val)
        end

        def contact_uid(val)
          InviteeUid.new(:contact_uid, val)
        end
      end

      ENTITY_UUID = 1
      CONTACT_UID = 2

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid', :optional => true},
        CONTACT_UID => {:type => ::Thrift::Types::STRING, :name => 'contact_uid', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class InvitationTargetUid < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def group_uid(val)
          InvitationTargetUid.new(:group_uid, val)
        end

        def petition_uid(val)
          InvitationTargetUid.new(:petition_uid, val)
        end

        def topic_uid(val)
          InvitationTargetUid.new(:topic_uid, val)
        end
      end

      GROUP_UID = 1
      PETITION_UID = 2
      TOPIC_UID = 3

      FIELDS = {
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid', :optional => true},
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid', :optional => true},
        TOPIC_UID => {:type => ::Thrift::Types::STRING, :name => 'topic_uid', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class Invitation
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      CREATED_AT = 3
      UPDATED_AT = 4
      INVITATION_TYPE_NAME = 5
      ACCEPTED_AT = 6
      DECLINED_AT = 7
      DEACTIVATED_AT = 8
      EXPIRED_AT = 9
      INVITATION_TARGET_UID = 10

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        CREATED_AT => {:type => ::Thrift::Types::STRING, :name => 'created_at'},
        UPDATED_AT => {:type => ::Thrift::Types::STRING, :name => 'updated_at'},
        INVITATION_TYPE_NAME => {:type => ::Thrift::Types::I32, :name => 'invitation_type_name', :enum_class => ::ThriftShop::Invitation::InvitationTypeName},
        ACCEPTED_AT => {:type => ::Thrift::Types::STRING, :name => 'accepted_at', :optional => true},
        DECLINED_AT => {:type => ::Thrift::Types::STRING, :name => 'declined_at', :optional => true},
        DEACTIVATED_AT => {:type => ::Thrift::Types::STRING, :name => 'deactivated_at', :optional => true},
        EXPIRED_AT => {:type => ::Thrift::Types::STRING, :name => 'expired_at', :optional => true},
        INVITATION_TARGET_UID => {:type => ::Thrift::Types::STRUCT, :name => 'invitation_target_uid', :class => ::ThriftShop::Invitation::InvitationTargetUid}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @invitation_type_name.nil? || ::ThriftShop::Invitation::InvitationTypeName::VALID_VALUES.include?(@invitation_type_name)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field invitation_type_name!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class InvitationConversion
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      INVITATION_UID = 2
      CONVERTER_ENTITY_UUID = 3
      CREATED_AT = 4
      UPDATED_AT = 5

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        INVITATION_UID => {:type => ::Thrift::Types::STRING, :name => 'invitation_uid'},
        CONVERTER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'converter_entity_uuid'},
        CREATED_AT => {:type => ::Thrift::Types::STRING, :name => 'created_at'},
        UPDATED_AT => {:type => ::Thrift::Types::STRING, :name => 'updated_at'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
