#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module ThriftShop
  module Shared
    module ExceptionClass
      CLIENT = 0
      SERVER = 1
      UPSTREAM = 2
      VALUE_MAP = {0 => "CLIENT", 1 => "SERVER", 2 => "UPSTREAM"}
      VALID_VALUES = Set.new([CLIENT, SERVER, UPSTREAM]).freeze
    end

    module ArgumentExceptionCode
      PRESENCE = 0
      INVALID = 1
      RESOURCE_NOT_FOUND = 2
      INVALID_LENGTH = 3
      NOT_IN_SET = 4
      VALUE_MAP = {0 => "PRESENCE", 1 => "INVALID", 2 => "RESOURCE_NOT_FOUND", 3 => "INVALID_LENGTH", 4 => "NOT_IN_SET"}
      VALID_VALUES = Set.new([PRESENCE, INVALID, RESOURCE_NOT_FOUND, INVALID_LENGTH, NOT_IN_SET]).freeze
    end

    module StateExceptionCode
      ALREADY_EXISTS = 1
      LIMIT_REACHED = 2
      RESOURCE_NOT_FOUND = 3
      VALUE_MAP = {1 => "ALREADY_EXISTS", 2 => "LIMIT_REACHED", 3 => "RESOURCE_NOT_FOUND"}
      VALID_VALUES = Set.new([ALREADY_EXISTS, LIMIT_REACHED, RESOURCE_NOT_FOUND]).freeze
    end

    module Service
      ACTION = 0
      AUTH = 1
      BRIGADE = 2
      CAMPAIGN = 3
      EVENT_BUS = 4
      INFLUENCE = 5
      CONTACT = 6
      CAMPAIGN_RECOMMENDATION = 7
      GROUP = 8
      EXPERIMENT = 9
      ALIGNMENT = 10
      CIVIC_DATA = 11
      VERIFIER = 12
      VALUE_MAP = {0 => "ACTION", 1 => "AUTH", 2 => "BRIGADE", 3 => "CAMPAIGN", 4 => "EVENT_BUS", 5 => "INFLUENCE", 6 => "CONTACT", 7 => "CAMPAIGN_RECOMMENDATION", 8 => "GROUP", 9 => "EXPERIMENT", 10 => "ALIGNMENT", 11 => "CIVIC_DATA", 12 => "VERIFIER"}
      VALID_VALUES = Set.new([ACTION, AUTH, BRIGADE, CAMPAIGN, EVENT_BUS, INFLUENCE, CONTACT, CAMPAIGN_RECOMMENDATION, GROUP, EXPERIMENT, ALIGNMENT, CIVIC_DATA, VERIFIER]).freeze
    end

    module EntityRole
      ADMIN = 0
      GUEST = 1
      LOGGED_OUT = 2
      USER = 3
      VALUE_MAP = {0 => "ADMIN", 1 => "GUEST", 2 => "LOGGED_OUT", 3 => "USER"}
      VALID_VALUES = Set.new([ADMIN, GUEST, LOGGED_OUT, USER]).freeze
    end

    module BoundaryLimitPaginationDirection
      AFTER = 0
      BEFORE = 1
      VALUE_MAP = {0 => "AFTER", 1 => "BEFORE"}
      VALID_VALUES = Set.new([AFTER, BEFORE]).freeze
    end

    module SortOrder
      DESC = 1
      ASC = 2
      VALUE_MAP = {1 => "DESC", 2 => "ASC"}
      VALID_VALUES = Set.new([DESC, ASC]).freeze
    end

    module ClientPlatform
      UNKNOWN = 1
      ANDROID = 2
      WEB = 3
      IOS = 4
      VALUE_MAP = {1 => "UNKNOWN", 2 => "ANDROID", 3 => "WEB", 4 => "IOS"}
      VALID_VALUES = Set.new([UNKNOWN, ANDROID, WEB, IOS]).freeze
    end

    module Pronoun
      NEUTRAL = 1
      FEMALE = 2
      MALE = 3
      VALUE_MAP = {1 => "NEUTRAL", 2 => "FEMALE", 3 => "MALE"}
      VALID_VALUES = Set.new([NEUTRAL, FEMALE, MALE]).freeze
    end

    class Entity
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UUID = 3
      ROLE = 2

      FIELDS = {
        UUID => {:type => ::Thrift::Types::STRING, :name => 'uuid', :optional => true},
        ROLE => {:type => ::Thrift::Types::I32, :name => 'role', :enum_class => ::ThriftShop::Shared::EntityRole}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @role.nil? || ::ThriftShop::Shared::EntityRole::VALID_VALUES.include?(@role)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field role!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Parameter < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uid_t(val)
          Parameter.new(:uid_t, val)
        end

        def date_time_t(val)
          Parameter.new(:date_time_t, val)
        end

        def string_t(val)
          Parameter.new(:string_t, val)
        end

        def i32_t(val)
          Parameter.new(:i32_t, val)
        end

        def i64_t(val)
          Parameter.new(:i64_t, val)
        end

        def bool_t(val)
          Parameter.new(:bool_t, val)
        end

        def double_t(val)
          Parameter.new(:double_t, val)
        end

        def null_t(val)
          Parameter.new(:null_t, val)
        end
      end

      UID_T = 1
      DATE_TIME_T = 2
      STRING_T = 3
      I32_T = 4
      I64_T = 5
      BOOL_T = 6
      DOUBLE_T = 7
      NULL_T = 8

      FIELDS = {
        UID_T => {:type => ::Thrift::Types::STRING, :name => 'uid_t', :optional => true},
        DATE_TIME_T => {:type => ::Thrift::Types::STRING, :name => 'date_time_t', :optional => true},
        STRING_T => {:type => ::Thrift::Types::STRING, :name => 'string_t', :optional => true},
        I32_T => {:type => ::Thrift::Types::I32, :name => 'i32_t', :optional => true},
        I64_T => {:type => ::Thrift::Types::I64, :name => 'i64_t', :optional => true},
        BOOL_T => {:type => ::Thrift::Types::BOOL, :name => 'bool_t', :optional => true},
        DOUBLE_T => {:type => ::Thrift::Types::DOUBLE, :name => 'double_t', :optional => true},
        NULL_T => {:type => ::Thrift::Types::BOOL, :name => 'null_t', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class JobExecutionParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      JOB_CLASS = 1
      JOB_PARAMS = 2

      FIELDS = {
        JOB_CLASS => {:type => ::Thrift::Types::STRING, :name => 'job_class'},
        JOB_PARAMS => {:type => ::Thrift::Types::MAP, :name => 'job_params', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Shared::Parameter}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class BoundaryLimitPaginationParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DIRECTION = 1
      LIMIT = 2
      BOUNDARY_UID = 3

      FIELDS = {
        DIRECTION => {:type => ::Thrift::Types::I32, :name => 'direction', :enum_class => ::ThriftShop::Shared::BoundaryLimitPaginationDirection},
        LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'},
        BOUNDARY_UID => {:type => ::Thrift::Types::STRING, :name => 'boundary_uid', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @direction.nil? || ::ThriftShop::Shared::BoundaryLimitPaginationDirection::VALID_VALUES.include?(@direction)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field direction!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class BoundaryLimitPageInfo
      include ::Thrift::Struct, ::Thrift::Struct_Union
      HAS_BEFORE = 1
      HAS_AFTER = 2
      TOTAL_COUNT = 3

      FIELDS = {
        HAS_BEFORE => {:type => ::Thrift::Types::BOOL, :name => 'has_before'},
        HAS_AFTER => {:type => ::Thrift::Types::BOOL, :name => 'has_after'},
        TOTAL_COUNT => {:type => ::Thrift::Types::I32, :name => 'total_count', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UtmParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UTM_SOURCE = 1
      UTM_CAMPAIGN = 2
      UTM_CONTENT = 3
      UTM_MEDIUM = 4

      FIELDS = {
        UTM_SOURCE => {:type => ::Thrift::Types::STRING, :name => 'utm_source'},
        UTM_CAMPAIGN => {:type => ::Thrift::Types::STRING, :name => 'utm_campaign', :optional => true},
        UTM_CONTENT => {:type => ::Thrift::Types::STRING, :name => 'utm_content', :optional => true},
        UTM_MEDIUM => {:type => ::Thrift::Types::STRING, :name => 'utm_medium', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RequestContext
      include ::Thrift::Struct, ::Thrift::Struct_Union
      INVITATION_UID = 1
      SHARE_UID = 2
      EMAIL_MESSAGE_UID = 3
      INSTALL_DEEP_LINK = 4
      LAUNCHED_URL = 5
      UTM_PARAMS = 6
      CLIENT_PLATFORM = 7
      CLIENT_IP_ADDRESS = 8

      FIELDS = {
        INVITATION_UID => {:type => ::Thrift::Types::STRING, :name => 'invitation_uid', :optional => true},
        SHARE_UID => {:type => ::Thrift::Types::STRING, :name => 'share_uid', :optional => true},
        EMAIL_MESSAGE_UID => {:type => ::Thrift::Types::STRING, :name => 'email_message_uid', :optional => true},
        INSTALL_DEEP_LINK => {:type => ::Thrift::Types::STRING, :name => 'install_deep_link', :optional => true},
        LAUNCHED_URL => {:type => ::Thrift::Types::STRING, :name => 'launched_url', :optional => true},
        UTM_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'utm_params', :class => ::ThriftShop::Shared::UtmParams, :optional => true},
        CLIENT_PLATFORM => {:type => ::Thrift::Types::I32, :name => 'client_platform', :optional => true, :enum_class => ::ThriftShop::Shared::ClientPlatform},
        CLIENT_IP_ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'client_ip_address', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @client_platform.nil? || ::ThriftShop::Shared::ClientPlatform::VALID_VALUES.include?(@client_platform)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field client_platform!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RequestHeaders
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY = 1
      REQUEST_ID = 2
      CONTEXT = 3

      FIELDS = {
        ENTITY => {:type => ::Thrift::Types::STRUCT, :name => 'entity', :class => ::ThriftShop::Shared::Entity, :optional => true},
        REQUEST_ID => {:type => ::Thrift::Types::STRING, :name => 'request_id'},
        CONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'context', :class => ::ThriftShop::Shared::RequestContext}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ArgumentException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      PATH = 2
      CODE = 3
      EXCEPTION_CLASS = 4

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
        CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ThriftShop::Shared::ArgumentExceptionCode},
        EXCEPTION_CLASS => {:type => ::Thrift::Types::I32, :name => 'exception_class', :default =>         0, :enum_class => ::ThriftShop::Shared::ExceptionClass}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @code.nil? || ::ThriftShop::Shared::ArgumentExceptionCode::VALID_VALUES.include?(@code)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
        end
        unless @exception_class.nil? || ::ThriftShop::Shared::ExceptionClass::VALID_VALUES.include?(@exception_class)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field exception_class!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UnauthorizedException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      EXCEPTION_CLASS = 2

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        EXCEPTION_CLASS => {:type => ::Thrift::Types::I32, :name => 'exception_class', :default =>         0, :enum_class => ::ThriftShop::Shared::ExceptionClass}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @exception_class.nil? || ::ThriftShop::Shared::ExceptionClass::VALID_VALUES.include?(@exception_class)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field exception_class!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class StateException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      CODE = 2
      EXCEPTION_CLASS = 3

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ThriftShop::Shared::StateExceptionCode},
        EXCEPTION_CLASS => {:type => ::Thrift::Types::I32, :name => 'exception_class', :default =>         0, :enum_class => ::ThriftShop::Shared::ExceptionClass}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @code.nil? || ::ThriftShop::Shared::StateExceptionCode::VALID_VALUES.include?(@code)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
        end
        unless @exception_class.nil? || ::ThriftShop::Shared::ExceptionClass::VALID_VALUES.include?(@exception_class)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field exception_class!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
