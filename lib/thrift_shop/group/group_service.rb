#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/group/group_types'

module ThriftShop
  module Group
    module GroupService
      class Client
        include ::Thrift::Client

        def get_twilio_chat_access_token(headers, request)
          send_get_twilio_chat_access_token(headers, request)
          return recv_get_twilio_chat_access_token()
        end

        def send_get_twilio_chat_access_token(headers, request)
          send_message('get_twilio_chat_access_token', Get_twilio_chat_access_token_args, :headers => headers, :request => request)
        end

        def recv_get_twilio_chat_access_token()
          result = receive_message(Get_twilio_chat_access_token_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_twilio_chat_access_token failed: unknown result')
        end

        def create_group(headers, request)
          send_create_group(headers, request)
          return recv_create_group()
        end

        def send_create_group(headers, request)
          send_message('create_group', Create_group_args, :headers => headers, :request => request)
        end

        def recv_create_group()
          result = receive_message(Create_group_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise result.twilio_request_exception unless result.twilio_request_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_group failed: unknown result')
        end

        def edit_group(headers, request)
          send_edit_group(headers, request)
          return recv_edit_group()
        end

        def send_edit_group(headers, request)
          send_message('edit_group', Edit_group_args, :headers => headers, :request => request)
        end

        def recv_edit_group()
          result = receive_message(Edit_group_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'edit_group failed: unknown result')
        end

        def delete_group_membership(headers, request)
          send_delete_group_membership(headers, request)
          recv_delete_group_membership()
        end

        def send_delete_group_membership(headers, request)
          send_message('delete_group_membership', Delete_group_membership_args, :headers => headers, :request => request)
        end

        def recv_delete_group_membership()
          result = receive_message(Delete_group_membership_result)
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise result.delete_group_membership_exception unless result.delete_group_membership_exception.nil?
          raise result.twilio_request_exception unless result.twilio_request_exception.nil?
          return
        end

        def get_groups_by_identifiers(headers, request)
          send_get_groups_by_identifiers(headers, request)
          return recv_get_groups_by_identifiers()
        end

        def send_get_groups_by_identifiers(headers, request)
          send_message('get_groups_by_identifiers', Get_groups_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_groups_by_identifiers()
          result = receive_message(Get_groups_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_groups_by_identifiers failed: unknown result')
        end

        def get_groups(headers, request)
          send_get_groups(headers, request)
          return recv_get_groups()
        end

        def send_get_groups(headers, request)
          send_message('get_groups', Get_groups_args, :headers => headers, :request => request)
        end

        def recv_get_groups()
          result = receive_message(Get_groups_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_groups failed: unknown result')
        end

        def create_group_petition_adoption(headers, request)
          send_create_group_petition_adoption(headers, request)
          return recv_create_group_petition_adoption()
        end

        def send_create_group_petition_adoption(headers, request)
          send_message('create_group_petition_adoption', Create_group_petition_adoption_args, :headers => headers, :request => request)
        end

        def recv_create_group_petition_adoption()
          result = receive_message(Create_group_petition_adoption_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_group_petition_adoption failed: unknown result')
        end

        def get_group_petition_adoptions(headers, request)
          send_get_group_petition_adoptions(headers, request)
          return recv_get_group_petition_adoptions()
        end

        def send_get_group_petition_adoptions(headers, request)
          send_message('get_group_petition_adoptions', Get_group_petition_adoptions_args, :headers => headers, :request => request)
        end

        def recv_get_group_petition_adoptions()
          result = receive_message(Get_group_petition_adoptions_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_group_petition_adoptions failed: unknown result')
        end

        def get_group_petition_adoption(headers, request)
          send_get_group_petition_adoption(headers, request)
          return recv_get_group_petition_adoption()
        end

        def send_get_group_petition_adoption(headers, request)
          send_message('get_group_petition_adoption', Get_group_petition_adoption_args, :headers => headers, :request => request)
        end

        def recv_get_group_petition_adoption()
          result = receive_message(Get_group_petition_adoption_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_group_petition_adoption failed: unknown result')
        end

        def get_group_petition_adoption_signature_counts(headers, request)
          send_get_group_petition_adoption_signature_counts(headers, request)
          return recv_get_group_petition_adoption_signature_counts()
        end

        def send_get_group_petition_adoption_signature_counts(headers, request)
          send_message('get_group_petition_adoption_signature_counts', Get_group_petition_adoption_signature_counts_args, :headers => headers, :request => request)
        end

        def recv_get_group_petition_adoption_signature_counts()
          result = receive_message(Get_group_petition_adoption_signature_counts_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_group_petition_adoption_signature_counts failed: unknown result')
        end

        def filter_petition_adoption_identifiers(headers, request)
          send_filter_petition_adoption_identifiers(headers, request)
          return recv_filter_petition_adoption_identifiers()
        end

        def send_filter_petition_adoption_identifiers(headers, request)
          send_message('filter_petition_adoption_identifiers', Filter_petition_adoption_identifiers_args, :headers => headers, :request => request)
        end

        def recv_filter_petition_adoption_identifiers()
          result = receive_message(Filter_petition_adoption_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'filter_petition_adoption_identifiers failed: unknown result')
        end

        def is_group_full(headers, request)
          send_is_group_full(headers, request)
          return recv_is_group_full()
        end

        def send_is_group_full(headers, request)
          send_message('is_group_full', Is_group_full_args, :headers => headers, :request => request)
        end

        def recv_is_group_full()
          result = receive_message(Is_group_full_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'is_group_full failed: unknown result')
        end

        def create_group_membership(headers, request)
          send_create_group_membership(headers, request)
          return recv_create_group_membership()
        end

        def send_create_group_membership(headers, request)
          send_message('create_group_membership', Create_group_membership_args, :headers => headers, :request => request)
        end

        def recv_create_group_membership()
          result = receive_message(Create_group_membership_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.create_group_membership_exception unless result.create_group_membership_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise result.twilio_request_exception unless result.twilio_request_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_group_membership failed: unknown result')
        end

        def get_group_memberships(headers, request)
          send_get_group_memberships(headers, request)
          return recv_get_group_memberships()
        end

        def send_get_group_memberships(headers, request)
          send_message('get_group_memberships', Get_group_memberships_args, :headers => headers, :request => request)
        end

        def recv_get_group_memberships()
          result = receive_message(Get_group_memberships_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_group_memberships failed: unknown result')
        end

        def get_group_memberships_by_identifiers(headers, request)
          send_get_group_memberships_by_identifiers(headers, request)
          return recv_get_group_memberships_by_identifiers()
        end

        def send_get_group_memberships_by_identifiers(headers, request)
          send_message('get_group_memberships_by_identifiers', Get_group_memberships_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_group_memberships_by_identifiers()
          result = receive_message(Get_group_memberships_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_group_memberships_by_identifiers failed: unknown result')
        end

        def filter_group_membership_identifiers(headers, request)
          send_filter_group_membership_identifiers(headers, request)
          return recv_filter_group_membership_identifiers()
        end

        def send_filter_group_membership_identifiers(headers, request)
          send_message('filter_group_membership_identifiers', Filter_group_membership_identifiers_args, :headers => headers, :request => request)
        end

        def recv_filter_group_membership_identifiers()
          result = receive_message(Filter_group_membership_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'filter_group_membership_identifiers failed: unknown result')
        end

        def get_group_petition_adoption_contributor_list(headers, request)
          send_get_group_petition_adoption_contributor_list(headers, request)
          return recv_get_group_petition_adoption_contributor_list()
        end

        def send_get_group_petition_adoption_contributor_list(headers, request)
          send_message('get_group_petition_adoption_contributor_list', Get_group_petition_adoption_contributor_list_args, :headers => headers, :request => request)
        end

        def recv_get_group_petition_adoption_contributor_list()
          result = receive_message(Get_group_petition_adoption_contributor_list_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_group_petition_adoption_contributor_list failed: unknown result')
        end

        def get_petition_group_contributions(headers, request)
          send_get_petition_group_contributions(headers, request)
          return recv_get_petition_group_contributions()
        end

        def send_get_petition_group_contributions(headers, request)
          send_message('get_petition_group_contributions', Get_petition_group_contributions_args, :headers => headers, :request => request)
        end

        def recv_get_petition_group_contributions()
          result = receive_message(Get_petition_group_contributions_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_petition_group_contributions failed: unknown result')
        end

        def get_chat_unread_message_count(headers, request)
          send_get_chat_unread_message_count(headers, request)
          return recv_get_chat_unread_message_count()
        end

        def send_get_chat_unread_message_count(headers, request)
          send_message('get_chat_unread_message_count', Get_chat_unread_message_count_args, :headers => headers, :request => request)
        end

        def recv_get_chat_unread_message_count()
          result = receive_message(Get_chat_unread_message_count_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.twilio_request_exception unless result.twilio_request_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_chat_unread_message_count failed: unknown result')
        end

        def get_chat_unread_message_counts_for_groups(headers, request)
          send_get_chat_unread_message_counts_for_groups(headers, request)
          return recv_get_chat_unread_message_counts_for_groups()
        end

        def send_get_chat_unread_message_counts_for_groups(headers, request)
          send_message('get_chat_unread_message_counts_for_groups', Get_chat_unread_message_counts_for_groups_args, :headers => headers, :request => request)
        end

        def recv_get_chat_unread_message_counts_for_groups()
          result = receive_message(Get_chat_unread_message_counts_for_groups_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.twilio_request_exception unless result.twilio_request_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise result.twilio_state_exception unless result.twilio_state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_chat_unread_message_counts_for_groups failed: unknown result')
        end

        def deregister_twilio_devices(headers, request)
          send_deregister_twilio_devices(headers, request)
          recv_deregister_twilio_devices()
        end

        def send_deregister_twilio_devices(headers, request)
          send_message('deregister_twilio_devices', Deregister_twilio_devices_args, :headers => headers, :request => request)
        end

        def recv_deregister_twilio_devices()
          result = receive_message(Deregister_twilio_devices_result)
          raise result.state_exception unless result.state_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.twilio_request_exception unless result.twilio_request_exception.nil?
          return
        end

        def receive_event_bus_message_parcel(headers, message_parcel)
          send_receive_event_bus_message_parcel(headers, message_parcel)
          recv_receive_event_bus_message_parcel()
        end

        def send_receive_event_bus_message_parcel(headers, message_parcel)
          send_message('receive_event_bus_message_parcel', Receive_event_bus_message_parcel_args, :headers => headers, :message_parcel => message_parcel)
        end

        def recv_receive_event_bus_message_parcel()
          result = receive_message(Receive_event_bus_message_parcel_result)
          return
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_get_twilio_chat_access_token(seqid, iprot, oprot)
          args = read_args(iprot, Get_twilio_chat_access_token_args)
          result = Get_twilio_chat_access_token_result.new()
          begin
            result.success = @handler.get_twilio_chat_access_token(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_twilio_chat_access_token', seqid)
        end

        def process_create_group(seqid, iprot, oprot)
          args = read_args(iprot, Create_group_args)
          result = Create_group_result.new()
          begin
            result.success = @handler.create_group(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          rescue ::ThriftShop::Twilio::TwilioRequestException => twilio_request_exception
            result.twilio_request_exception = twilio_request_exception
          end
          write_result(result, oprot, 'create_group', seqid)
        end

        def process_edit_group(seqid, iprot, oprot)
          args = read_args(iprot, Edit_group_args)
          result = Edit_group_result.new()
          begin
            result.success = @handler.edit_group(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          end
          write_result(result, oprot, 'edit_group', seqid)
        end

        def process_delete_group_membership(seqid, iprot, oprot)
          args = read_args(iprot, Delete_group_membership_args)
          result = Delete_group_membership_result.new()
          begin
            @handler.delete_group_membership(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          rescue ::ThriftShop::Group::DeleteGroupMembershipException => delete_group_membership_exception
            result.delete_group_membership_exception = delete_group_membership_exception
          rescue ::ThriftShop::Twilio::TwilioRequestException => twilio_request_exception
            result.twilio_request_exception = twilio_request_exception
          end
          write_result(result, oprot, 'delete_group_membership', seqid)
        end

        def process_get_groups_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_groups_by_identifiers_args)
          result = Get_groups_by_identifiers_result.new()
          begin
            result.success = @handler.get_groups_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_groups_by_identifiers', seqid)
        end

        def process_get_groups(seqid, iprot, oprot)
          args = read_args(iprot, Get_groups_args)
          result = Get_groups_result.new()
          begin
            result.success = @handler.get_groups(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_groups', seqid)
        end

        def process_create_group_petition_adoption(seqid, iprot, oprot)
          args = read_args(iprot, Create_group_petition_adoption_args)
          result = Create_group_petition_adoption_result.new()
          begin
            result.success = @handler.create_group_petition_adoption(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          end
          write_result(result, oprot, 'create_group_petition_adoption', seqid)
        end

        def process_get_group_petition_adoptions(seqid, iprot, oprot)
          args = read_args(iprot, Get_group_petition_adoptions_args)
          result = Get_group_petition_adoptions_result.new()
          begin
            result.success = @handler.get_group_petition_adoptions(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_group_petition_adoptions', seqid)
        end

        def process_get_group_petition_adoption(seqid, iprot, oprot)
          args = read_args(iprot, Get_group_petition_adoption_args)
          result = Get_group_petition_adoption_result.new()
          begin
            result.success = @handler.get_group_petition_adoption(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_group_petition_adoption', seqid)
        end

        def process_get_group_petition_adoption_signature_counts(seqid, iprot, oprot)
          args = read_args(iprot, Get_group_petition_adoption_signature_counts_args)
          result = Get_group_petition_adoption_signature_counts_result.new()
          begin
            result.success = @handler.get_group_petition_adoption_signature_counts(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          end
          write_result(result, oprot, 'get_group_petition_adoption_signature_counts', seqid)
        end

        def process_filter_petition_adoption_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Filter_petition_adoption_identifiers_args)
          result = Filter_petition_adoption_identifiers_result.new()
          begin
            result.success = @handler.filter_petition_adoption_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'filter_petition_adoption_identifiers', seqid)
        end

        def process_is_group_full(seqid, iprot, oprot)
          args = read_args(iprot, Is_group_full_args)
          result = Is_group_full_result.new()
          begin
            result.success = @handler.is_group_full(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'is_group_full', seqid)
        end

        def process_create_group_membership(seqid, iprot, oprot)
          args = read_args(iprot, Create_group_membership_args)
          result = Create_group_membership_result.new()
          begin
            result.success = @handler.create_group_membership(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Group::CreateGroupMembershipException => create_group_membership_exception
            result.create_group_membership_exception = create_group_membership_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          rescue ::ThriftShop::Twilio::TwilioRequestException => twilio_request_exception
            result.twilio_request_exception = twilio_request_exception
          end
          write_result(result, oprot, 'create_group_membership', seqid)
        end

        def process_get_group_memberships(seqid, iprot, oprot)
          args = read_args(iprot, Get_group_memberships_args)
          result = Get_group_memberships_result.new()
          begin
            result.success = @handler.get_group_memberships(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_group_memberships', seqid)
        end

        def process_get_group_memberships_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_group_memberships_by_identifiers_args)
          result = Get_group_memberships_by_identifiers_result.new()
          begin
            result.success = @handler.get_group_memberships_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_group_memberships_by_identifiers', seqid)
        end

        def process_filter_group_membership_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Filter_group_membership_identifiers_args)
          result = Filter_group_membership_identifiers_result.new()
          begin
            result.success = @handler.filter_group_membership_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'filter_group_membership_identifiers', seqid)
        end

        def process_get_group_petition_adoption_contributor_list(seqid, iprot, oprot)
          args = read_args(iprot, Get_group_petition_adoption_contributor_list_args)
          result = Get_group_petition_adoption_contributor_list_result.new()
          begin
            result.success = @handler.get_group_petition_adoption_contributor_list(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          end
          write_result(result, oprot, 'get_group_petition_adoption_contributor_list', seqid)
        end

        def process_get_petition_group_contributions(seqid, iprot, oprot)
          args = read_args(iprot, Get_petition_group_contributions_args)
          result = Get_petition_group_contributions_result.new()
          begin
            result.success = @handler.get_petition_group_contributions(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_petition_group_contributions', seqid)
        end

        def process_get_chat_unread_message_count(seqid, iprot, oprot)
          args = read_args(iprot, Get_chat_unread_message_count_args)
          result = Get_chat_unread_message_count_result.new()
          begin
            result.success = @handler.get_chat_unread_message_count(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Twilio::TwilioRequestException => twilio_request_exception
            result.twilio_request_exception = twilio_request_exception
          end
          write_result(result, oprot, 'get_chat_unread_message_count', seqid)
        end

        def process_get_chat_unread_message_counts_for_groups(seqid, iprot, oprot)
          args = read_args(iprot, Get_chat_unread_message_counts_for_groups_args)
          result = Get_chat_unread_message_counts_for_groups_result.new()
          begin
            result.success = @handler.get_chat_unread_message_counts_for_groups(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Twilio::TwilioRequestException => twilio_request_exception
            result.twilio_request_exception = twilio_request_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          rescue ::ThriftShop::Twilio::TwilioStateException => twilio_state_exception
            result.twilio_state_exception = twilio_state_exception
          end
          write_result(result, oprot, 'get_chat_unread_message_counts_for_groups', seqid)
        end

        def process_deregister_twilio_devices(seqid, iprot, oprot)
          args = read_args(iprot, Deregister_twilio_devices_args)
          result = Deregister_twilio_devices_result.new()
          begin
            @handler.deregister_twilio_devices(args.headers, args.request)
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Twilio::TwilioRequestException => twilio_request_exception
            result.twilio_request_exception = twilio_request_exception
          end
          write_result(result, oprot, 'deregister_twilio_devices', seqid)
        end

        def process_receive_event_bus_message_parcel(seqid, iprot, oprot)
          args = read_args(iprot, Receive_event_bus_message_parcel_args)
          result = Receive_event_bus_message_parcel_result.new()
          @handler.receive_event_bus_message_parcel(args.headers, args.message_parcel)
          write_result(result, oprot, 'receive_event_bus_message_parcel', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Get_twilio_chat_access_token_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetTwilioChatAccessTokenRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_twilio_chat_access_token_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_group_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::CreateGroupRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_group_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        STATE_EXCEPTION = 3
        TWILIO_REQUEST_EXCEPTION = 4

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::Group},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException},
          TWILIO_REQUEST_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'twilio_request_exception', :class => ::ThriftShop::Twilio::TwilioRequestException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_group_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::EditGroupRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_group_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        STATE_EXCEPTION = 3

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::Group},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_group_membership_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::DeleteGroupMembershipRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_group_membership_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        STATE_EXCEPTION = 3
        DELETE_GROUP_MEMBERSHIP_EXCEPTION = 4
        TWILIO_REQUEST_EXCEPTION = 5

        FIELDS = {
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException},
          DELETE_GROUP_MEMBERSHIP_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'delete_group_membership_exception', :class => ::ThriftShop::Group::DeleteGroupMembershipException},
          TWILIO_REQUEST_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'twilio_request_exception', :class => ::ThriftShop::Twilio::TwilioRequestException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_groups_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetGroupsByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_groups_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        UNAUTHORIZED_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::Groups},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_groups_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetGroupsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_groups_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::PaginatedGroups},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_group_petition_adoption_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::CreateGroupPetitionAdoptionRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_group_petition_adoption_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        STATE_EXCEPTION = 3

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::GroupPetitionAdoption},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_petition_adoptions_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetGroupPetitionAdoptionsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_petition_adoptions_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::PaginatedGroupPetitionAdoptions},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_petition_adoption_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetGroupPetitionAdoptionRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_petition_adoption_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::GroupPetitionAdoption},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_petition_adoption_signature_counts_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetGroupPetitionAdoptionSignatureCountsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_petition_adoption_signature_counts_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        STATE_EXCEPTION = 3

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::GroupPetitionAdoptionSignatureCounts},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Filter_petition_adoption_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::FilterPetitionAdoptionIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Filter_petition_adoption_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::FilteredPetitionAdoptionIdentifiers},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Is_group_full_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::IsGroupFullRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Is_group_full_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_group_membership_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::CreateGroupMembershipRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_group_membership_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        CREATE_GROUP_MEMBERSHIP_EXCEPTION = 3
        STATE_EXCEPTION = 4
        TWILIO_REQUEST_EXCEPTION = 5

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::GroupMembership},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          CREATE_GROUP_MEMBERSHIP_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'create_group_membership_exception', :class => ::ThriftShop::Group::CreateGroupMembershipException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException},
          TWILIO_REQUEST_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'twilio_request_exception', :class => ::ThriftShop::Twilio::TwilioRequestException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_memberships_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetGroupMembershipsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_memberships_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::PaginatedGroupMemberships},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_memberships_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetGroupMembershipsByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_memberships_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::GroupMemberships},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Filter_group_membership_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::FilterGroupMembershipIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Filter_group_membership_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::FilteredGroupMembershipIdentifiers},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_petition_adoption_contributor_list_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetGroupPetitionAdoptionContributorListRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_group_petition_adoption_contributor_list_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        STATE_EXCEPTION = 3

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::GroupPetitionAdoptionContributors},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_group_contributions_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetPetitionGroupContributionsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_group_contributions_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::PetitionGroupContributions},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_chat_unread_message_count_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetChatUnreadMessageCountRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_chat_unread_message_count_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        TWILIO_REQUEST_EXCEPTION = 3

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::ChatUnreadMessageCount},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          TWILIO_REQUEST_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'twilio_request_exception', :class => ::ThriftShop::Twilio::TwilioRequestException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_chat_unread_message_counts_for_groups_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::GetChatUnreadMessageCountsForGroupsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_chat_unread_message_counts_for_groups_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        TWILIO_REQUEST_EXCEPTION = 3
        STATE_EXCEPTION = 4
        TWILIO_STATE_EXCEPTION = 5

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Group::ChatUnreadMessageCountsForGroups},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          TWILIO_REQUEST_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'twilio_request_exception', :class => ::ThriftShop::Twilio::TwilioRequestException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException},
          TWILIO_STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'twilio_state_exception', :class => ::ThriftShop::Twilio::TwilioStateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Deregister_twilio_devices_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Group::DeregisterTwilioDevicesRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Deregister_twilio_devices_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        STATE_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        TWILIO_REQUEST_EXCEPTION = 3

        FIELDS = {
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          TWILIO_REQUEST_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'twilio_request_exception', :class => ::ThriftShop::Twilio::TwilioRequestException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Receive_event_bus_message_parcel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        MESSAGE_PARCEL = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          MESSAGE_PARCEL => {:type => ::Thrift::Types::STRUCT, :name => 'message_parcel', :class => ::ThriftShop::EventBus::MessageParcel}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Receive_event_bus_message_parcel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
