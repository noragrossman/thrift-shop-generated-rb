#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/shared/shared_types'
require 'thrift_shop/share/share_types'
require 'thrift_shop/device/device_types'
require 'thrift_shop/twilio/twilio_types'
require 'thrift_shop/invitation/invitation_types'
require 'thrift_shop/event_bus/event_bus_types'
require 'thrift_shop/group/group_shared_types'


module ThriftShop
  module Group
    module CreateGroupMembershipExceptionCode
      INVITATION_ALREADY_DECLINED = 1
      INVITATION_EXPIRED = 2
      INVITATION_DEACTIVATED = 3
      INVITATION_ALREADY_ACCEPTED = 4
      GROUP_FULL = 6
      VALUE_MAP = {1 => "INVITATION_ALREADY_DECLINED", 2 => "INVITATION_EXPIRED", 3 => "INVITATION_DEACTIVATED", 4 => "INVITATION_ALREADY_ACCEPTED", 6 => "GROUP_FULL"}
      VALID_VALUES = Set.new([INVITATION_ALREADY_DECLINED, INVITATION_EXPIRED, INVITATION_DEACTIVATED, INVITATION_ALREADY_ACCEPTED, GROUP_FULL]).freeze
    end

    module DeleteGroupMembershipExceptionCode
      LEADER_CANNOT_BE_DELETED = 1
      VALUE_MAP = {1 => "LEADER_CANNOT_BE_DELETED"}
      VALID_VALUES = Set.new([LEADER_CANNOT_BE_DELETED]).freeze
    end

    class GetTwilioChatAccessTokenRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      TWILIO_DEVICE_ID = 2
      PUSH_PROVIDER_TYPE = 3

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        TWILIO_DEVICE_ID => {:type => ::Thrift::Types::STRING, :name => 'twilio_device_id'},
        PUSH_PROVIDER_TYPE => {:type => ::Thrift::Types::I32, :name => 'push_provider_type', :enum_class => ::ThriftShop::Device::PushProviderType}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @push_provider_type.nil? || ::ThriftShop::Device::PushProviderType::VALID_VALUES.include?(@push_provider_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field push_provider_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Group
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      NAME = 2
      MISSION = 3
      IMAGE = 4
      LEADER_ENTITY_UUID = 5
      MAX_GROUP_SIZE = 6
      TWILIO_CHAT_CHANNEL_SID = 7
      INVITATION_PREFILL = 8
      CREATED_AT = 9

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        MISSION => {:type => ::Thrift::Types::STRING, :name => 'mission', :optional => true},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image', :optional => true},
        LEADER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'leader_entity_uuid'},
        MAX_GROUP_SIZE => {:type => ::Thrift::Types::I32, :name => 'max_group_size'},
        TWILIO_CHAT_CHANNEL_SID => {:type => ::Thrift::Types::STRING, :name => 'twilio_chat_channel_sid', :optional => true},
        INVITATION_PREFILL => {:type => ::Thrift::Types::STRING, :name => 'invitation_prefill'},
        CREATED_AT => {:type => ::Thrift::Types::STRING, :name => 'created_at'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Groups
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUPS = 1

      FIELDS = {
        GROUPS => {:type => ::Thrift::Types::LIST, :name => 'groups', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::Group}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CreateGroupRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NAME = 1
      MISSION = 2
      IMAGE = 3
      LEADER_ENTITY_UUID = 4
      LEADER_FIRST_NAME = 5

      FIELDS = {
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        MISSION => {:type => ::Thrift::Types::STRING, :name => 'mission', :optional => true},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image', :optional => true},
        LEADER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'leader_entity_uuid'},
        LEADER_FIRST_NAME => {:type => ::Thrift::Types::STRING, :name => 'leader_first_name'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EditGroupRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      NAME = 2
      MISSION = 3
      IMAGE = 4

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        MISSION => {:type => ::Thrift::Types::STRING, :name => 'mission'},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DeleteGroupMembershipRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_MEMBERSHIP_UID = 1

      FIELDS = {
        GROUP_MEMBERSHIP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_membership_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GroupMembershipRecruitmentAttempt < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def invitation(val)
          GroupMembershipRecruitmentAttempt.new(:invitation, val)
        end

        def share(val)
          GroupMembershipRecruitmentAttempt.new(:share, val)
        end
      end

      INVITATION = 1
      SHARE = 2

      FIELDS = {
        INVITATION => {:type => ::Thrift::Types::STRUCT, :name => 'invitation', :class => ::ThriftShop::Invitation::Invitation, :optional => true},
        SHARE => {:type => ::Thrift::Types::STRUCT, :name => 'share', :class => ::ThriftShop::Share::Share, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class GroupMembership
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      GROUP_UID = 2
      ENTITY_UUID = 3
      ENABLED = 4

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'},
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        ENABLED => {:type => ::Thrift::Types::BOOL, :name => 'enabled'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EnabledEntityGroupIdentifier
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      GROUP_UID = 2

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EntityGroupIdentifier
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      GROUP_UID = 2
      ENABLED = 3

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'},
        ENABLED => {:type => ::Thrift::Types::BOOL, :name => 'enabled'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GroupMemberships
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_MEMBERSHIPS = 1

      FIELDS = {
        GROUP_MEMBERSHIPS => {:type => ::Thrift::Types::LIST, :name => 'group_memberships', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::GroupMembership}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GroupMembershipUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          GroupMembershipUniqueIdentifiers.new(:uids, val)
        end

        def enabled_entity_group_identifiers(val)
          GroupMembershipUniqueIdentifiers.new(:enabled_entity_group_identifiers, val)
        end
      end

      UIDS = 1
      ENABLED_ENTITY_GROUP_IDENTIFIERS = 2

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        ENABLED_ENTITY_GROUP_IDENTIFIERS => {:type => ::Thrift::Types::LIST, :name => 'enabled_entity_group_identifiers', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::EnabledEntityGroupIdentifier}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class GroupMembershipFilterIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          GroupMembershipFilterIdentifiers.new(:uids, val)
        end

        def entity_group_identifiers(val)
          GroupMembershipFilterIdentifiers.new(:entity_group_identifiers, val)
        end
      end

      UIDS = 1
      ENTITY_GROUP_IDENTIFIERS = 2

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        ENTITY_GROUP_IDENTIFIERS => {:type => ::Thrift::Types::LIST, :name => 'entity_group_identifiers', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::EntityGroupIdentifier}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class CreateGroupMembershipRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      GROUP_UID = 2
      GROUP_MEMBERSHIP_RECRUITMENT_ATTEMPT = 3
      MEMBER_FIRST_NAME = 4

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'},
        GROUP_MEMBERSHIP_RECRUITMENT_ATTEMPT => {:type => ::Thrift::Types::STRUCT, :name => 'group_membership_recruitment_attempt', :class => ::ThriftShop::Group::GroupMembershipRecruitmentAttempt},
        MEMBER_FIRST_NAME => {:type => ::Thrift::Types::STRING, :name => 'member_first_name'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IsGroupFullRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_UID = 1

      FIELDS = {
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GroupUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          GroupUniqueIdentifiers.new(:uids, val)
        end

        def twilio_chat_channel_sids(val)
          GroupUniqueIdentifiers.new(:twilio_chat_channel_sids, val)
        end
      end

      UIDS = 1
      TWILIO_CHAT_CHANNEL_SIDS = 2

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        TWILIO_CHAT_CHANNEL_SIDS => {:type => ::Thrift::Types::LIST, :name => 'twilio_chat_channel_sids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class GetGroupsByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_IDENTIFIERS = 1

      FIELDS = {
        GROUP_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'group_identifiers', :class => ::ThriftShop::Group::GroupUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetGroupsFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_UIDS = 1
      MEMBER_ENTITY_UUIDS = 2

      FIELDS = {
        GROUP_UIDS => {:type => ::Thrift::Types::LIST, :name => 'group_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        MEMBER_ENTITY_UUIDS => {:type => ::Thrift::Types::LIST, :name => 'member_entity_uuids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetGroupsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      FILTER_PARAMS = 2

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::Group::GetGroupsFilterParams, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedGroups
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      GROUPS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        GROUPS => {:type => ::Thrift::Types::LIST, :name => 'groups', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::Group}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CreateGroupPetitionAdoptionRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_UID = 1
      PETITION_UID = 2
      PETITION_SIGNATURE_GOAL = 3

      FIELDS = {
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'},
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        PETITION_SIGNATURE_GOAL => {:type => ::Thrift::Types::I32, :name => 'petition_signature_goal'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GroupPetitionAdoptionSignatureCount
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_PETITION_ADOPTION_UID = 1
      SIGNATURE_COUNT = 2

      FIELDS = {
        GROUP_PETITION_ADOPTION_UID => {:type => ::Thrift::Types::STRING, :name => 'group_petition_adoption_uid'},
        SIGNATURE_COUNT => {:type => ::Thrift::Types::I32, :name => 'signature_count'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GroupPetitionAdoptionSignatureCounts
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_PETITION_ADOPTION_SIGNATURE_COUNTS = 1

      FIELDS = {
        GROUP_PETITION_ADOPTION_SIGNATURE_COUNTS => {:type => ::Thrift::Types::LIST, :name => 'group_petition_adoption_signature_counts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::GroupPetitionAdoptionSignatureCount}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetGroupPetitionAdoptionRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_PETITION_ADOPTION_UID = 1

      FIELDS = {
        GROUP_PETITION_ADOPTION_UID => {:type => ::Thrift::Types::STRING, :name => 'group_petition_adoption_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetGroupPetitionAdoptionSignatureCountsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_PETITION_ADOPTION_UIDS = 1

      FIELDS = {
        GROUP_PETITION_ADOPTION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'group_petition_adoption_uids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetGroupPetitionAdoptionsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      GROUP_UID = 2

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GroupPetitionIdentifier
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_UID = 1
      PETITION_UID = 2

      FIELDS = {
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'},
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GroupPetitionAdoptionFilterIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def group_petition_identifiers(val)
          GroupPetitionAdoptionFilterIdentifiers.new(:group_petition_identifiers, val)
        end
      end

      GROUP_PETITION_IDENTIFIERS = 1

      FIELDS = {
        GROUP_PETITION_IDENTIFIERS => {:type => ::Thrift::Types::LIST, :name => 'group_petition_identifiers', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::GroupPetitionIdentifier}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class FilterPetitionAdoptionIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILTER_IDENTIFIERS = 1

      FIELDS = {
        FILTER_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_identifiers', :class => ::ThriftShop::Group::GroupPetitionAdoptionFilterIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FilteredPetitionAdoptionIdentifiers
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILTERED_IDENTIFIERS = 1

      FIELDS = {
        FILTERED_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'filtered_identifiers', :class => ::ThriftShop::Group::GroupPetitionAdoptionFilterIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedGroupPetitionAdoptions
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      GROUP_PETITION_ADOPTIONS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        GROUP_PETITION_ADOPTIONS => {:type => ::Thrift::Types::LIST, :name => 'group_petition_adoptions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::GroupPetitionAdoption}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetGroupMembershipsFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EXCLUDE_LEADER = 1

      FIELDS = {
        EXCLUDE_LEADER => {:type => ::Thrift::Types::BOOL, :name => 'exclude_leader', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetGroupMembershipsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      GROUP_UID = 2
      FILTER_PARAMS = 3

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::Group::GetGroupMembershipsFilterParams, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetGroupMembershipsByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_MEMBERSHIP_IDENTIFIERS = 1

      FIELDS = {
        GROUP_MEMBERSHIP_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'group_membership_identifiers', :class => ::ThriftShop::Group::GroupMembershipUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FilterGroupMembershipIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILTER_IDENTIFIERS = 1

      FIELDS = {
        FILTER_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_identifiers', :class => ::ThriftShop::Group::GroupMembershipFilterIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FilteredGroupMembershipIdentifiers
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILTERED_IDENTIFIERS = 1

      FIELDS = {
        FILTERED_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'filtered_identifiers', :class => ::ThriftShop::Group::GroupMembershipFilterIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedGroupMemberships
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      GROUP_MEMBERSHIPS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        GROUP_MEMBERSHIPS => {:type => ::Thrift::Types::LIST, :name => 'group_memberships', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::GroupMembership}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GroupPetitionAdoptionContributor
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      SIGNATURE_COUNT = 2
      RANK = 3
      UID = 4

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        SIGNATURE_COUNT => {:type => ::Thrift::Types::I32, :name => 'signature_count'},
        RANK => {:type => ::Thrift::Types::I32, :name => 'rank'},
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GroupPetitionAdoptionContributors
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_PETITION_ADOPTION_CONTRIBUTORS = 1

      FIELDS = {
        GROUP_PETITION_ADOPTION_CONTRIBUTORS => {:type => ::Thrift::Types::LIST, :name => 'group_petition_adoption_contributors', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::GroupPetitionAdoptionContributor}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetGroupPetitionAdoptionContributorListRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_PETITION_ADOPTION_UID = 1

      FIELDS = {
        GROUP_PETITION_ADOPTION_UID => {:type => ::Thrift::Types::STRING, :name => 'group_petition_adoption_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DeregisterTwilioDevicesRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetChatUnreadMessageCountRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetChatUnreadMessageCountsForGroupsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_UIDS = 1
      ENTITY_UUID = 2

      FIELDS = {
        GROUP_UIDS => {:type => ::Thrift::Types::LIST, :name => 'group_uids', :element => {:type => ::Thrift::Types::STRING}},
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ChatUnreadMessageCount
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CHAT_UNREAD_MESSAGE_COUNT = 1

      FIELDS = {
        CHAT_UNREAD_MESSAGE_COUNT => {:type => ::Thrift::Types::I32, :name => 'chat_unread_message_count'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ChatUnreadMessageCountForGroup
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_UID = 1
      CHAT_UNREAD_MESSAGE_COUNT = 2

      FIELDS = {
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'},
        CHAT_UNREAD_MESSAGE_COUNT => {:type => ::Thrift::Types::I32, :name => 'chat_unread_message_count'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ChatUnreadMessageCountsForGroups
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CHAT_UNREAD_MESSAGE_COUNTS_FOR_GROUPS = 1

      FIELDS = {
        CHAT_UNREAD_MESSAGE_COUNTS_FOR_GROUPS => {:type => ::Thrift::Types::LIST, :name => 'chat_unread_message_counts_for_groups', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::ChatUnreadMessageCountForGroup}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionGroupContributionsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionGroupContribution
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GROUP_UID = 1
      PETITION_UID = 2
      SIGNATURE_COUNT = 3

      FIELDS = {
        GROUP_UID => {:type => ::Thrift::Types::STRING, :name => 'group_uid'},
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        SIGNATURE_COUNT => {:type => ::Thrift::Types::I32, :name => 'signature_count'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionGroupContributions
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_GROUP_CONTRIBUTIONS = 1

      FIELDS = {
        PETITION_GROUP_CONTRIBUTIONS => {:type => ::Thrift::Types::LIST, :name => 'petition_group_contributions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Group::PetitionGroupContribution}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CreateGroupMembershipException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      CODE = 2

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ThriftShop::Group::CreateGroupMembershipExceptionCode}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @code.nil? || ::ThriftShop::Group::CreateGroupMembershipExceptionCode::VALID_VALUES.include?(@code)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DeleteGroupMembershipException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      CODE = 2

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ThriftShop::Group::DeleteGroupMembershipExceptionCode}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @code.nil? || ::ThriftShop::Group::DeleteGroupMembershipExceptionCode::VALID_VALUES.include?(@code)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
