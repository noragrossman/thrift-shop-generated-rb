#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/shared/shared_types'
require 'thrift_shop/event_bus/eb_shared_types'


module ThriftShop
  module EventBus
    module PositionAgreement
      AGREE = 1
      DISAGREE = 2
      UNSURE = 3
      VALUE_MAP = {1 => "AGREE", 2 => "DISAGREE", 3 => "UNSURE"}
      VALID_VALUES = Set.new([AGREE, DISAGREE, UNSURE]).freeze
    end

    class PositionChanged
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CHANGE_TYPE = 1
      POSITION_UID = 2
      AUTHOR_ENTITY_UUID = 3
      TOPIC_UID = 7
      BODY = 4
      CORE = 5
      CHANGED_AT = 6

      FIELDS = {
        CHANGE_TYPE => {:type => ::Thrift::Types::I32, :name => 'change_type', :enum_class => ::ThriftShop::EventBus::ChangeType},
        POSITION_UID => {:type => ::Thrift::Types::STRING, :name => 'position_uid'},
        AUTHOR_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'author_entity_uuid'},
        TOPIC_UID => {:type => ::Thrift::Types::STRING, :name => 'topic_uid'},
        BODY => {:type => ::Thrift::Types::STRING, :name => 'body'},
        CORE => {:type => ::Thrift::Types::BOOL, :name => 'core'},
        CHANGED_AT => {:type => ::Thrift::Types::STRING, :name => 'changed_at'}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @change_type.nil? || ::ThriftShop::EventBus::ChangeType::VALID_VALUES.include?(@change_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field change_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PositionResponseCreated
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      AGREEMENT = 3
      CREATED_AT = 4
      POSITION_UID = 5

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        AGREEMENT => {:type => ::Thrift::Types::I32, :name => 'agreement', :enum_class => ::ThriftShop::EventBus::PositionAgreement},
        CREATED_AT => {:type => ::Thrift::Types::STRING, :name => 'created_at'},
        POSITION_UID => {:type => ::Thrift::Types::STRING, :name => 'position_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @agreement.nil? || ::ThriftShop::EventBus::PositionAgreement::VALID_VALUES.include?(@agreement)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field agreement!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PositionResponseDeleted
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      AGREEMENT = 3
      DELETED_AT = 4
      POSITION_UID = 5

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        AGREEMENT => {:type => ::Thrift::Types::I32, :name => 'agreement', :enum_class => ::ThriftShop::EventBus::PositionAgreement},
        DELETED_AT => {:type => ::Thrift::Types::STRING, :name => 'deleted_at'},
        POSITION_UID => {:type => ::Thrift::Types::STRING, :name => 'position_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @agreement.nil? || ::ThriftShop::EventBus::PositionAgreement::VALID_VALUES.include?(@agreement)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field agreement!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PositionResponseUpdated
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      AGREEMENT = 3
      UPDATED_AT = 4
      POSITION_UID = 5

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        AGREEMENT => {:type => ::Thrift::Types::I32, :name => 'agreement', :enum_class => ::ThriftShop::EventBus::PositionAgreement},
        UPDATED_AT => {:type => ::Thrift::Types::STRING, :name => 'updated_at'},
        POSITION_UID => {:type => ::Thrift::Types::STRING, :name => 'position_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @agreement.nil? || ::ThriftShop::EventBus::PositionAgreement::VALID_VALUES.include?(@agreement)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field agreement!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
