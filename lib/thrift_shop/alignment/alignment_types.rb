#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/shared/shared_types'
require 'thrift_shop/event_bus/event_bus_types'


module ThriftShop
  module Alignment
    module PopulationType
      DISTRICT = 1
      GROUP = 2
      PETITION = 3
      USER = 4
      VALUE_MAP = {1 => "DISTRICT", 2 => "GROUP", 3 => "PETITION", 4 => "USER"}
      VALID_VALUES = Set.new([DISTRICT, GROUP, PETITION, USER]).freeze
    end

    module PositionAgreement
      AGREE = 1
      DISAGREE = 2
      SKIP = 3
      VALUE_MAP = {1 => "AGREE", 2 => "DISAGREE", 3 => "SKIP"}
      VALID_VALUES = Set.new([AGREE, DISAGREE, SKIP]).freeze
    end

    class DeletePositionResponseRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      POSITION_UID = 2

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        POSITION_UID => {:type => ::Thrift::Types::STRING, :name => 'position_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EntityAlignment
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      POPULATION_UUID = 2
      POPULATION_TYPE = 3
      POSITION_UIDS = 4
      TOPIC_UID = 5
      SCORE = 6
      OVERLAP_COUNT = 7

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        POPULATION_UUID => {:type => ::Thrift::Types::STRING, :name => 'population_uuid'},
        POPULATION_TYPE => {:type => ::Thrift::Types::I32, :name => 'population_type', :enum_class => ::ThriftShop::Alignment::PopulationType},
        POSITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'position_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        TOPIC_UID => {:type => ::Thrift::Types::STRING, :name => 'topic_uid', :optional => true},
        SCORE => {:type => ::Thrift::Types::DOUBLE, :name => 'score', :optional => true},
        OVERLAP_COUNT => {:type => ::Thrift::Types::I32, :name => 'overlap_count', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @population_type.nil? || ::ThriftShop::Alignment::PopulationType::VALID_VALUES.include?(@population_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field population_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PositionUpdateAlignment
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      SCORE = 2
      OVERLAP_COUNT = 3

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        SCORE => {:type => ::Thrift::Types::DOUBLE, :name => 'score', :optional => true},
        OVERLAP_COUNT => {:type => ::Thrift::Types::I32, :name => 'overlap_count', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPopulationAlignmentsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VIEWER_ENTITY_UUID = 1
      POPULATION_TYPE = 2
      POPULATION_UIDS = 3
      POSITION_UIDS = 4
      TOPIC_UID = 5

      FIELDS = {
        VIEWER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'viewer_entity_uuid'},
        POPULATION_TYPE => {:type => ::Thrift::Types::I32, :name => 'population_type', :enum_class => ::ThriftShop::Alignment::PopulationType},
        POPULATION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'population_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        POSITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'position_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        TOPIC_UID => {:type => ::Thrift::Types::STRING, :name => 'topic_uid', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @population_type.nil? || ::ThriftShop::Alignment::PopulationType::VALID_VALUES.include?(@population_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field population_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetUserAlignmentsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VIEWER_ENTITY_UUID = 1
      TARGET_ENTITY_UUIDS = 2
      POSITION_UIDS = 3
      TOPIC_UID = 4

      FIELDS = {
        VIEWER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'viewer_entity_uuid'},
        TARGET_ENTITY_UUIDS => {:type => ::Thrift::Types::LIST, :name => 'target_entity_uuids', :element => {:type => ::Thrift::Types::STRING}},
        POSITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'position_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        TOPIC_UID => {:type => ::Thrift::Types::STRING, :name => 'topic_uid', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UpdatePositionResponseRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      POSITION_UID = 2
      AGREEMENT = 3
      POPULATION_UID = 4
      POPULATION_TYPE = 5
      POSITION_UIDS = 6
      TOPIC_UID = 7

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        POSITION_UID => {:type => ::Thrift::Types::STRING, :name => 'position_uid'},
        AGREEMENT => {:type => ::Thrift::Types::I32, :name => 'agreement', :enum_class => ::ThriftShop::Alignment::PositionAgreement},
        POPULATION_UID => {:type => ::Thrift::Types::STRING, :name => 'population_uid', :optional => true},
        POPULATION_TYPE => {:type => ::Thrift::Types::I32, :name => 'population_type', :optional => true, :enum_class => ::ThriftShop::Alignment::PopulationType},
        POSITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'position_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        TOPIC_UID => {:type => ::Thrift::Types::STRING, :name => 'topic_uid', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @agreement.nil? || ::ThriftShop::Alignment::PositionAgreement::VALID_VALUES.include?(@agreement)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field agreement!')
        end
        unless @population_type.nil? || ::ThriftShop::Alignment::PopulationType::VALID_VALUES.include?(@population_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field population_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPopulationAlignmentsForTopicsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VIEWER_ENTITY_UUID = 1
      POPULATION_TYPE = 2
      POPULATION_UID = 3
      POSITION_UIDS = 4
      TOPIC_UIDS = 5

      FIELDS = {
        VIEWER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'viewer_entity_uuid'},
        POPULATION_TYPE => {:type => ::Thrift::Types::I32, :name => 'population_type', :enum_class => ::ThriftShop::Alignment::PopulationType},
        POPULATION_UID => {:type => ::Thrift::Types::STRING, :name => 'population_uid', :optional => true},
        POSITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'position_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        TOPIC_UIDS => {:type => ::Thrift::Types::LIST, :name => 'topic_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @population_type.nil? || ::ThriftShop::Alignment::PopulationType::VALID_VALUES.include?(@population_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field population_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetUserAlignmentsForTopicsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VIEWER_ENTITY_UUID = 1
      TARGET_ENTITY_UUID = 2
      POSITION_UIDS = 3
      TOPIC_UIDS = 4

      FIELDS = {
        VIEWER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'viewer_entity_uuid'},
        TARGET_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'target_entity_uuid'},
        POSITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'position_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        TOPIC_UIDS => {:type => ::Thrift::Types::LIST, :name => 'topic_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
