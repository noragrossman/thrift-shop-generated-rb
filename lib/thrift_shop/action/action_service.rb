#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/action/action_types'

module ThriftShop
  module Action
    module ActionService
      class Client
        include ::Thrift::Client

        def create_petition(headers, request)
          send_create_petition(headers, request)
          return recv_create_petition()
        end

        def send_create_petition(headers, request)
          send_message('create_petition', Create_petition_args, :headers => headers, :request => request)
        end

        def recv_create_petition()
          result = receive_message(Create_petition_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_petition failed: unknown result')
        end

        def edit_petition(headers, request)
          send_edit_petition(headers, request)
          return recv_edit_petition()
        end

        def send_edit_petition(headers, request)
          send_message('edit_petition', Edit_petition_args, :headers => headers, :request => request)
        end

        def recv_edit_petition()
          result = receive_message(Edit_petition_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'edit_petition failed: unknown result')
        end

        def get_petitions(headers, request)
          send_get_petitions(headers, request)
          return recv_get_petitions()
        end

        def send_get_petitions(headers, request)
          send_message('get_petitions', Get_petitions_args, :headers => headers, :request => request)
        end

        def recv_get_petitions()
          result = receive_message(Get_petitions_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_petitions failed: unknown result')
        end

        def get_petitions_by_identifiers(headers, request)
          send_get_petitions_by_identifiers(headers, request)
          return recv_get_petitions_by_identifiers()
        end

        def send_get_petitions_by_identifiers(headers, request)
          send_message('get_petitions_by_identifiers', Get_petitions_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_petitions_by_identifiers()
          result = receive_message(Get_petitions_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_petitions_by_identifiers failed: unknown result')
        end

        def create_petition_signature(headers, request)
          send_create_petition_signature(headers, request)
          return recv_create_petition_signature()
        end

        def send_create_petition_signature(headers, request)
          send_message('create_petition_signature', Create_petition_signature_args, :headers => headers, :request => request)
        end

        def recv_create_petition_signature()
          result = receive_message(Create_petition_signature_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_petition_signature failed: unknown result')
        end

        def get_entity_signatures(headers, request)
          send_get_entity_signatures(headers, request)
          return recv_get_entity_signatures()
        end

        def send_get_entity_signatures(headers, request)
          send_message('get_entity_signatures', Get_entity_signatures_args, :headers => headers, :request => request)
        end

        def recv_get_entity_signatures()
          result = receive_message(Get_entity_signatures_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_entity_signatures failed: unknown result')
        end

        def get_petition_signatures(headers, request)
          send_get_petition_signatures(headers, request)
          return recv_get_petition_signatures()
        end

        def send_get_petition_signatures(headers, request)
          send_message('get_petition_signatures', Get_petition_signatures_args, :headers => headers, :request => request)
        end

        def recv_get_petition_signatures()
          result = receive_message(Get_petition_signatures_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_petition_signatures failed: unknown result')
        end

        def get_petition_grade_counts(headers, request)
          send_get_petition_grade_counts(headers, request)
          return recv_get_petition_grade_counts()
        end

        def send_get_petition_grade_counts(headers, request)
          send_message('get_petition_grade_counts', Get_petition_grade_counts_args, :headers => headers, :request => request)
        end

        def recv_get_petition_grade_counts()
          result = receive_message(Get_petition_grade_counts_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_petition_grade_counts failed: unknown result')
        end

        def get_petition_signature_counts(headers, request)
          send_get_petition_signature_counts(headers, request)
          return recv_get_petition_signature_counts()
        end

        def send_get_petition_signature_counts(headers, request)
          send_message('get_petition_signature_counts', Get_petition_signature_counts_args, :headers => headers, :request => request)
        end

        def recv_get_petition_signature_counts()
          result = receive_message(Get_petition_signature_counts_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_petition_signature_counts failed: unknown result')
        end

        def filter_petition_signature_identifiers(headers, request)
          send_filter_petition_signature_identifiers(headers, request)
          return recv_filter_petition_signature_identifiers()
        end

        def send_filter_petition_signature_identifiers(headers, request)
          send_message('filter_petition_signature_identifiers', Filter_petition_signature_identifiers_args, :headers => headers, :request => request)
        end

        def recv_filter_petition_signature_identifiers()
          result = receive_message(Filter_petition_signature_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'filter_petition_signature_identifiers failed: unknown result')
        end

        def is_permitted_to_sign_petition(headers, request)
          send_is_permitted_to_sign_petition(headers, request)
          return recv_is_permitted_to_sign_petition()
        end

        def send_is_permitted_to_sign_petition(headers, request)
          send_message('is_permitted_to_sign_petition', Is_permitted_to_sign_petition_args, :headers => headers, :request => request)
        end

        def recv_is_permitted_to_sign_petition()
          result = receive_message(Is_permitted_to_sign_petition_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'is_permitted_to_sign_petition failed: unknown result')
        end

        def add_petition_term_targets(headers, request)
          send_add_petition_term_targets(headers, request)
          return recv_add_petition_term_targets()
        end

        def send_add_petition_term_targets(headers, request)
          send_message('add_petition_term_targets', Add_petition_term_targets_args, :headers => headers, :request => request)
        end

        def recv_add_petition_term_targets()
          result = receive_message(Add_petition_term_targets_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_petition_term_targets failed: unknown result')
        end

        def add_petition_candidacy_targets(headers, request)
          send_add_petition_candidacy_targets(headers, request)
          return recv_add_petition_candidacy_targets()
        end

        def send_add_petition_candidacy_targets(headers, request)
          send_message('add_petition_candidacy_targets', Add_petition_candidacy_targets_args, :headers => headers, :request => request)
        end

        def recv_add_petition_candidacy_targets()
          result = receive_message(Add_petition_candidacy_targets_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_petition_candidacy_targets failed: unknown result')
        end

        def remove_petition_term_target(headers, request)
          send_remove_petition_term_target(headers, request)
          recv_remove_petition_term_target()
        end

        def send_remove_petition_term_target(headers, request)
          send_message('remove_petition_term_target', Remove_petition_term_target_args, :headers => headers, :request => request)
        end

        def recv_remove_petition_term_target()
          result = receive_message(Remove_petition_term_target_result)
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          return
        end

        def remove_petition_candidacy_target(headers, request)
          send_remove_petition_candidacy_target(headers, request)
          recv_remove_petition_candidacy_target()
        end

        def send_remove_petition_candidacy_target(headers, request)
          send_message('remove_petition_candidacy_target', Remove_petition_candidacy_target_args, :headers => headers, :request => request)
        end

        def recv_remove_petition_candidacy_target()
          result = receive_message(Remove_petition_candidacy_target_result)
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          return
        end

        def grade_petition_targets(headers, request)
          send_grade_petition_targets(headers, request)
          return recv_grade_petition_targets()
        end

        def send_grade_petition_targets(headers, request)
          send_message('grade_petition_targets', Grade_petition_targets_args, :headers => headers, :request => request)
        end

        def recv_grade_petition_targets()
          result = receive_message(Grade_petition_targets_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'grade_petition_targets failed: unknown result')
        end

        def get_petition_targets(header, request)
          send_get_petition_targets(header, request)
          return recv_get_petition_targets()
        end

        def send_get_petition_targets(header, request)
          send_message('get_petition_targets', Get_petition_targets_args, :header => header, :request => request)
        end

        def recv_get_petition_targets()
          result = receive_message(Get_petition_targets_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_petition_targets failed: unknown result')
        end

        def get_petition_targets_by_identifiers(headers, request)
          send_get_petition_targets_by_identifiers(headers, request)
          return recv_get_petition_targets_by_identifiers()
        end

        def send_get_petition_targets_by_identifiers(headers, request)
          send_message('get_petition_targets_by_identifiers', Get_petition_targets_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_petition_targets_by_identifiers()
          result = receive_message(Get_petition_targets_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_petition_targets_by_identifiers failed: unknown result')
        end

        def get_matching_petition_term_targets(header, request)
          send_get_matching_petition_term_targets(header, request)
          return recv_get_matching_petition_term_targets()
        end

        def send_get_matching_petition_term_targets(header, request)
          send_message('get_matching_petition_term_targets', Get_matching_petition_term_targets_args, :header => header, :request => request)
        end

        def recv_get_matching_petition_term_targets()
          result = receive_message(Get_matching_petition_term_targets_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_matching_petition_term_targets failed: unknown result')
        end

        def launch_petition(headers, request)
          send_launch_petition(headers, request)
          return recv_launch_petition()
        end

        def send_launch_petition(headers, request)
          send_message('launch_petition', Launch_petition_args, :headers => headers, :request => request)
        end

        def recv_launch_petition()
          result = receive_message(Launch_petition_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'launch_petition failed: unknown result')
        end

        def publish_petition_grades(headers, request)
          send_publish_petition_grades(headers, request)
          return recv_publish_petition_grades()
        end

        def send_publish_petition_grades(headers, request)
          send_message('publish_petition_grades', Publish_petition_grades_args, :headers => headers, :request => request)
        end

        def recv_publish_petition_grades()
          result = receive_message(Publish_petition_grades_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.petition_state_exception unless result.petition_state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'publish_petition_grades failed: unknown result')
        end

        def close_petition(headers, request)
          send_close_petition(headers, request)
          return recv_close_petition()
        end

        def send_close_petition(headers, request)
          send_message('close_petition', Close_petition_args, :headers => headers, :request => request)
        end

        def recv_close_petition()
          result = receive_message(Close_petition_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'close_petition failed: unknown result')
        end

        def get_entity_term_petition_grade_counts(headers, request)
          send_get_entity_term_petition_grade_counts(headers, request)
          return recv_get_entity_term_petition_grade_counts()
        end

        def send_get_entity_term_petition_grade_counts(headers, request)
          send_message('get_entity_term_petition_grade_counts', Get_entity_term_petition_grade_counts_args, :headers => headers, :request => request)
        end

        def recv_get_entity_term_petition_grade_counts()
          result = receive_message(Get_entity_term_petition_grade_counts_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_entity_term_petition_grade_counts failed: unknown result')
        end

        def receive_event_bus_message_parcel(headers, message_parcel)
          send_receive_event_bus_message_parcel(headers, message_parcel)
          recv_receive_event_bus_message_parcel()
        end

        def send_receive_event_bus_message_parcel(headers, message_parcel)
          send_message('receive_event_bus_message_parcel', Receive_event_bus_message_parcel_args, :headers => headers, :message_parcel => message_parcel)
        end

        def recv_receive_event_bus_message_parcel()
          result = receive_message(Receive_event_bus_message_parcel_result)
          return
        end

        def filter_terms_by_entity_actions(headers, request)
          send_filter_terms_by_entity_actions(headers, request)
          return recv_filter_terms_by_entity_actions()
        end

        def send_filter_terms_by_entity_actions(headers, request)
          send_message('filter_terms_by_entity_actions', Filter_terms_by_entity_actions_args, :headers => headers, :request => request)
        end

        def recv_filter_terms_by_entity_actions()
          result = receive_message(Filter_terms_by_entity_actions_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'filter_terms_by_entity_actions failed: unknown result')
        end

        def get_petition_target_signatures_count(headers, request)
          send_get_petition_target_signatures_count(headers, request)
          return recv_get_petition_target_signatures_count()
        end

        def send_get_petition_target_signatures_count(headers, request)
          send_message('get_petition_target_signatures_count', Get_petition_target_signatures_count_args, :headers => headers, :request => request)
        end

        def recv_get_petition_target_signatures_count()
          result = receive_message(Get_petition_target_signatures_count_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_petition_target_signatures_count failed: unknown result')
        end

        def send_grading_notifications(headers, request)
          send_send_grading_notifications(headers, request)
          recv_send_grading_notifications()
        end

        def send_send_grading_notifications(headers, request)
          send_message('send_grading_notifications', Send_grading_notifications_args, :headers => headers, :request => request)
        end

        def recv_send_grading_notifications()
          result = receive_message(Send_grading_notifications_result)
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.petition_state_exception unless result.petition_state_exception.nil?
          return
        end

        def get_events_by_identifiers(headers, request)
          send_get_events_by_identifiers(headers, request)
          return recv_get_events_by_identifiers()
        end

        def send_get_events_by_identifiers(headers, request)
          send_message('get_events_by_identifiers', Get_events_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_events_by_identifiers()
          result = receive_message(Get_events_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_events_by_identifiers failed: unknown result')
        end

        def get_events(headers, request)
          send_get_events(headers, request)
          return recv_get_events()
        end

        def send_get_events(headers, request)
          send_message('get_events', Get_events_args, :headers => headers, :request => request)
        end

        def recv_get_events()
          result = receive_message(Get_events_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_events failed: unknown result')
        end

        def create_event(headers, request)
          send_create_event(headers, request)
          return recv_create_event()
        end

        def send_create_event(headers, request)
          send_message('create_event', Create_event_args, :headers => headers, :request => request)
        end

        def recv_create_event()
          result = receive_message(Create_event_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_event failed: unknown result')
        end

        def delete_event(headers, request)
          send_delete_event(headers, request)
          recv_delete_event()
        end

        def send_delete_event(headers, request)
          send_message('delete_event', Delete_event_args, :headers => headers, :request => request)
        end

        def recv_delete_event()
          result = receive_message(Delete_event_result)
          raise result.state_exception unless result.state_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          return
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_create_petition(seqid, iprot, oprot)
          args = read_args(iprot, Create_petition_args)
          result = Create_petition_result.new()
          begin
            result.success = @handler.create_petition(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'create_petition', seqid)
        end

        def process_edit_petition(seqid, iprot, oprot)
          args = read_args(iprot, Edit_petition_args)
          result = Edit_petition_result.new()
          begin
            result.success = @handler.edit_petition(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'edit_petition', seqid)
        end

        def process_get_petitions(seqid, iprot, oprot)
          args = read_args(iprot, Get_petitions_args)
          result = Get_petitions_result.new()
          begin
            result.success = @handler.get_petitions(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_petitions', seqid)
        end

        def process_get_petitions_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_petitions_by_identifiers_args)
          result = Get_petitions_by_identifiers_result.new()
          begin
            result.success = @handler.get_petitions_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_petitions_by_identifiers', seqid)
        end

        def process_create_petition_signature(seqid, iprot, oprot)
          args = read_args(iprot, Create_petition_signature_args)
          result = Create_petition_signature_result.new()
          begin
            result.success = @handler.create_petition_signature(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'create_petition_signature', seqid)
        end

        def process_get_entity_signatures(seqid, iprot, oprot)
          args = read_args(iprot, Get_entity_signatures_args)
          result = Get_entity_signatures_result.new()
          begin
            result.success = @handler.get_entity_signatures(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_entity_signatures', seqid)
        end

        def process_get_petition_signatures(seqid, iprot, oprot)
          args = read_args(iprot, Get_petition_signatures_args)
          result = Get_petition_signatures_result.new()
          begin
            result.success = @handler.get_petition_signatures(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_petition_signatures', seqid)
        end

        def process_get_petition_grade_counts(seqid, iprot, oprot)
          args = read_args(iprot, Get_petition_grade_counts_args)
          result = Get_petition_grade_counts_result.new()
          begin
            result.success = @handler.get_petition_grade_counts(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_petition_grade_counts', seqid)
        end

        def process_get_petition_signature_counts(seqid, iprot, oprot)
          args = read_args(iprot, Get_petition_signature_counts_args)
          result = Get_petition_signature_counts_result.new()
          begin
            result.success = @handler.get_petition_signature_counts(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_petition_signature_counts', seqid)
        end

        def process_filter_petition_signature_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Filter_petition_signature_identifiers_args)
          result = Filter_petition_signature_identifiers_result.new()
          begin
            result.success = @handler.filter_petition_signature_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'filter_petition_signature_identifiers', seqid)
        end

        def process_is_permitted_to_sign_petition(seqid, iprot, oprot)
          args = read_args(iprot, Is_permitted_to_sign_petition_args)
          result = Is_permitted_to_sign_petition_result.new()
          begin
            result.success = @handler.is_permitted_to_sign_petition(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'is_permitted_to_sign_petition', seqid)
        end

        def process_add_petition_term_targets(seqid, iprot, oprot)
          args = read_args(iprot, Add_petition_term_targets_args)
          result = Add_petition_term_targets_result.new()
          begin
            result.success = @handler.add_petition_term_targets(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'add_petition_term_targets', seqid)
        end

        def process_add_petition_candidacy_targets(seqid, iprot, oprot)
          args = read_args(iprot, Add_petition_candidacy_targets_args)
          result = Add_petition_candidacy_targets_result.new()
          begin
            result.success = @handler.add_petition_candidacy_targets(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'add_petition_candidacy_targets', seqid)
        end

        def process_remove_petition_term_target(seqid, iprot, oprot)
          args = read_args(iprot, Remove_petition_term_target_args)
          result = Remove_petition_term_target_result.new()
          begin
            @handler.remove_petition_term_target(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'remove_petition_term_target', seqid)
        end

        def process_remove_petition_candidacy_target(seqid, iprot, oprot)
          args = read_args(iprot, Remove_petition_candidacy_target_args)
          result = Remove_petition_candidacy_target_result.new()
          begin
            @handler.remove_petition_candidacy_target(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'remove_petition_candidacy_target', seqid)
        end

        def process_grade_petition_targets(seqid, iprot, oprot)
          args = read_args(iprot, Grade_petition_targets_args)
          result = Grade_petition_targets_result.new()
          begin
            result.success = @handler.grade_petition_targets(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'grade_petition_targets', seqid)
        end

        def process_get_petition_targets(seqid, iprot, oprot)
          args = read_args(iprot, Get_petition_targets_args)
          result = Get_petition_targets_result.new()
          begin
            result.success = @handler.get_petition_targets(args.header, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_petition_targets', seqid)
        end

        def process_get_petition_targets_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_petition_targets_by_identifiers_args)
          result = Get_petition_targets_by_identifiers_result.new()
          begin
            result.success = @handler.get_petition_targets_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_petition_targets_by_identifiers', seqid)
        end

        def process_get_matching_petition_term_targets(seqid, iprot, oprot)
          args = read_args(iprot, Get_matching_petition_term_targets_args)
          result = Get_matching_petition_term_targets_result.new()
          begin
            result.success = @handler.get_matching_petition_term_targets(args.header, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_matching_petition_term_targets', seqid)
        end

        def process_launch_petition(seqid, iprot, oprot)
          args = read_args(iprot, Launch_petition_args)
          result = Launch_petition_result.new()
          begin
            result.success = @handler.launch_petition(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'launch_petition', seqid)
        end

        def process_publish_petition_grades(seqid, iprot, oprot)
          args = read_args(iprot, Publish_petition_grades_args)
          result = Publish_petition_grades_result.new()
          begin
            result.success = @handler.publish_petition_grades(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Action::PetitionStateException => petition_state_exception
            result.petition_state_exception = petition_state_exception
          end
          write_result(result, oprot, 'publish_petition_grades', seqid)
        end

        def process_close_petition(seqid, iprot, oprot)
          args = read_args(iprot, Close_petition_args)
          result = Close_petition_result.new()
          begin
            result.success = @handler.close_petition(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'close_petition', seqid)
        end

        def process_get_entity_term_petition_grade_counts(seqid, iprot, oprot)
          args = read_args(iprot, Get_entity_term_petition_grade_counts_args)
          result = Get_entity_term_petition_grade_counts_result.new()
          begin
            result.success = @handler.get_entity_term_petition_grade_counts(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_entity_term_petition_grade_counts', seqid)
        end

        def process_receive_event_bus_message_parcel(seqid, iprot, oprot)
          args = read_args(iprot, Receive_event_bus_message_parcel_args)
          result = Receive_event_bus_message_parcel_result.new()
          @handler.receive_event_bus_message_parcel(args.headers, args.message_parcel)
          write_result(result, oprot, 'receive_event_bus_message_parcel', seqid)
        end

        def process_filter_terms_by_entity_actions(seqid, iprot, oprot)
          args = read_args(iprot, Filter_terms_by_entity_actions_args)
          result = Filter_terms_by_entity_actions_result.new()
          begin
            result.success = @handler.filter_terms_by_entity_actions(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'filter_terms_by_entity_actions', seqid)
        end

        def process_get_petition_target_signatures_count(seqid, iprot, oprot)
          args = read_args(iprot, Get_petition_target_signatures_count_args)
          result = Get_petition_target_signatures_count_result.new()
          begin
            result.success = @handler.get_petition_target_signatures_count(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_petition_target_signatures_count', seqid)
        end

        def process_send_grading_notifications(seqid, iprot, oprot)
          args = read_args(iprot, Send_grading_notifications_args)
          result = Send_grading_notifications_result.new()
          begin
            @handler.send_grading_notifications(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::Action::PetitionStateException => petition_state_exception
            result.petition_state_exception = petition_state_exception
          end
          write_result(result, oprot, 'send_grading_notifications', seqid)
        end

        def process_get_events_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_events_by_identifiers_args)
          result = Get_events_by_identifiers_result.new()
          begin
            result.success = @handler.get_events_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_events_by_identifiers', seqid)
        end

        def process_get_events(seqid, iprot, oprot)
          args = read_args(iprot, Get_events_args)
          result = Get_events_result.new()
          begin
            result.success = @handler.get_events(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_events', seqid)
        end

        def process_create_event(seqid, iprot, oprot)
          args = read_args(iprot, Create_event_args)
          result = Create_event_result.new()
          begin
            result.success = @handler.create_event(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'create_event', seqid)
        end

        def process_delete_event(seqid, iprot, oprot)
          args = read_args(iprot, Delete_event_args)
          result = Delete_event_result.new()
          begin
            @handler.delete_event(args.headers, args.request)
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'delete_event', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Create_petition_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::CreatePetitionRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_petition_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::Petition},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_petition_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::EditPetitionRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_petition_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::Petition},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petitions_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetPetitionsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petitions_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::PaginatedPetitions},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petitions_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetPetitionsByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petitions_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::Petitions},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_petition_signature_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::CreatePetitionSignatureRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_petition_signature_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::PetitionSignature},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_entity_signatures_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetEntitySignaturesRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_entity_signatures_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::PaginatedPetitionSignatures},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_signatures_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetPetitionSignaturesRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_signatures_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::PaginatedPetitionSignatures},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_grade_counts_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetPetitionGradeCountsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_grade_counts_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::PetitionGradeCounts},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_signature_counts_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetPetitionSignatureCountsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_signature_counts_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::PetitionSignatureCounts},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Filter_petition_signature_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::FilterPetitionSignatureIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Filter_petition_signature_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::FilteredPetitionSignatureIdentifiers},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Is_permitted_to_sign_petition_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::IsPermittedToSignPetitionRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Is_permitted_to_sign_petition_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Add_petition_term_targets_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::AddPetitionTermTargetsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Add_petition_term_targets_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionTermTarget}},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Add_petition_candidacy_targets_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::AddPetitionCandidacyTargetsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Add_petition_candidacy_targets_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionCandidacyTarget}},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Remove_petition_term_target_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::RemovePetitionTermTargetRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Remove_petition_term_target_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Remove_petition_candidacy_target_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::RemovePetitionCandidacyTargetRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Remove_petition_candidacy_target_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Grade_petition_targets_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GradePetitionTargetsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Grade_petition_targets_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionTarget}},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_targets_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADER = 1
        REQUEST = 2

        FIELDS = {
          HEADER => {:type => ::Thrift::Types::STRUCT, :name => 'header', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetPetitionTargetsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_targets_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::PaginatedPetitionTargets},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_targets_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetPetitionTargetsByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_targets_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::PetitionTargets},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_matching_petition_term_targets_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADER = 1
        REQUEST = 2

        FIELDS = {
          HEADER => {:type => ::Thrift::Types::STRUCT, :name => 'header', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetMatchingPetitionTermTargetsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_matching_petition_term_targets_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionTermTarget}},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Launch_petition_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::LaunchPetitionRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Launch_petition_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::Petition},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Publish_petition_grades_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::PublishPetitionGradesRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Publish_petition_grades_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        PETITION_STATE_EXCEPTION = 3

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::Petition},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          PETITION_STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'petition_state_exception', :class => ::ThriftShop::Action::PetitionStateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_petition_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::ClosePetitionRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Close_petition_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::Petition},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_entity_term_petition_grade_counts_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetEntityTermPetitionGradeCountsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_entity_term_petition_grade_counts_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::EntityTermPetitionGradeCount}},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Receive_event_bus_message_parcel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        MESSAGE_PARCEL = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          MESSAGE_PARCEL => {:type => ::Thrift::Types::STRUCT, :name => 'message_parcel', :class => ::ThriftShop::EventBus::MessageParcel}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Receive_event_bus_message_parcel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Filter_terms_by_entity_actions_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::FilterTermsByEntityActionsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Filter_terms_by_entity_actions_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_target_signatures_count_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetPetitionTargetSignaturesCountRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_petition_target_signatures_count_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Send_grading_notifications_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::SendGradingNotificationsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Send_grading_notifications_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARGUMENT_EXCEPTION = 1
        STATE_EXCEPTION = 2
        UNAUTHORIZED_EXCEPTION = 3
        PETITION_STATE_EXCEPTION = 4

        FIELDS = {
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          PETITION_STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'petition_state_exception', :class => ::ThriftShop::Action::PetitionStateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_events_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetEventsByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_events_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::Events},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_events_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::GetEventsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_events_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::PaginatedEvents},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_event_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::CreateEventRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_event_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::Action::Event},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_event_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::Action::DeleteEventRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_event_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        STATE_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
