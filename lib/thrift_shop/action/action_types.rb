#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/shared/shared_types'
require 'thrift_shop/event_bus/event_bus_types'


module ThriftShop
  module Action
    module PetitionLifecycleState
      DRAFT = 0
      ACTIVE = 1
      CLOSED = 2
      VALUE_MAP = {0 => "DRAFT", 1 => "ACTIVE", 2 => "CLOSED"}
      VALID_VALUES = Set.new([DRAFT, ACTIVE, CLOSED]).freeze
    end

    module GetPetitionsSortField
      LAUNCHED_AT = 0
      VALUE_MAP = {0 => "LAUNCHED_AT"}
      VALID_VALUES = Set.new([LAUNCHED_AT]).freeze
    end

    module GetPetitionsSortOrder
      ASC = 0
      DESC = 1
      VALUE_MAP = {0 => "ASC", 1 => "DESC"}
      VALID_VALUES = Set.new([ASC, DESC]).freeze
    end

    module GetEntitySignaturesSortField
      SIGNATURE_DATE = 1
      GRADES_PUBLISHED_DATE = 2
      VALUE_MAP = {1 => "SIGNATURE_DATE", 2 => "GRADES_PUBLISHED_DATE"}
      VALID_VALUES = Set.new([SIGNATURE_DATE, GRADES_PUBLISHED_DATE]).freeze
    end

    module PetitionTargetType
      CANDIDACY = 0
      TERM = 1
      VALUE_MAP = {0 => "CANDIDACY", 1 => "TERM"}
      VALID_VALUES = Set.new([CANDIDACY, TERM]).freeze
    end

    module PetitionTargetGrade
      SUCCESS = 0
      FAILURE = 1
      NEUTRAL = 2
      VALUE_MAP = {0 => "SUCCESS", 1 => "FAILURE", 2 => "NEUTRAL"}
      VALID_VALUES = Set.new([SUCCESS, FAILURE, NEUTRAL]).freeze
    end

    module FilterTermsByEntityActionsOption
      SOME_ACTIONS_TAKEN = 1
      NO_ACTIONS_TAKEN = 2
      NO_ACTIONS_AVAILABLE = 3
      VALUE_MAP = {1 => "SOME_ACTIONS_TAKEN", 2 => "NO_ACTIONS_TAKEN", 3 => "NO_ACTIONS_AVAILABLE"}
      VALID_VALUES = Set.new([SOME_ACTIONS_TAKEN, NO_ACTIONS_TAKEN, NO_ACTIONS_AVAILABLE]).freeze
    end

    module PetitionStateExceptionCode
      LEGEND_INCOMPLETE = 1
      PETITION_NOT_CLOSED = 2
      GRADES_INCOMPLETE = 3
      GRADES_NOT_PUBLISHED = 4
      VALUE_MAP = {1 => "LEGEND_INCOMPLETE", 2 => "PETITION_NOT_CLOSED", 3 => "GRADES_INCOMPLETE", 4 => "GRADES_NOT_PUBLISHED"}
      VALID_VALUES = Set.new([LEGEND_INCOMPLETE, PETITION_NOT_CLOSED, GRADES_INCOMPLETE, GRADES_NOT_PUBLISHED]).freeze
    end

    class PetitionTypedTargetUid < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def term_uid(val)
          PetitionTypedTargetUid.new(:term_uid, val)
        end

        def candidacy_uid(val)
          PetitionTypedTargetUid.new(:candidacy_uid, val)
        end
      end

      TERM_UID = 1
      CANDIDACY_UID = 2

      FIELDS = {
        TERM_UID => {:type => ::Thrift::Types::STRING, :name => 'term_uid', :optional => true},
        CANDIDACY_UID => {:type => ::Thrift::Types::STRING, :name => 'candidacy_uid', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class PetitionGradeLegend
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS_DESCRIPTION = 1
      FAILURE_DESCRIPTION = 2
      NEUTRAL_DESCRIPTION = 3

      FIELDS = {
        SUCCESS_DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'success_description'},
        FAILURE_DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'failure_description'},
        NEUTRAL_DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'neutral_description'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Petition
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      TITLE = 2
      SUMMARY = 3
      DESCRIPTION = 4
      TARGET_DESCRIPTION = 5
      IMAGE = 6
      SIGNATURE_GOAL = 7
      DEADLINE = 8
      LAUNCHED_AT = 9
      CLOSED_AT = 10
      GRADE_LEGEND = 11
      GRADES_PUBLISHED = 12
      TWEET_PREFILL = 13
      RICH_TEXT_SUMMARY = 14
      EMAIL_SNIPPET = 15
      INVITATION_PREFILL = 16
      REPORT_RECAP = 17
      RICH_TEXT_REPORT_RECAP = 18
      TARGET_TYPES = 19

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
        SUMMARY => {:type => ::Thrift::Types::STRING, :name => 'summary'},
        DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true},
        TARGET_DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'target_description'},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image'},
        SIGNATURE_GOAL => {:type => ::Thrift::Types::I32, :name => 'signature_goal'},
        DEADLINE => {:type => ::Thrift::Types::STRING, :name => 'deadline'},
        LAUNCHED_AT => {:type => ::Thrift::Types::STRING, :name => 'launched_at', :optional => true},
        CLOSED_AT => {:type => ::Thrift::Types::STRING, :name => 'closed_at', :optional => true},
        GRADE_LEGEND => {:type => ::Thrift::Types::STRUCT, :name => 'grade_legend', :class => ::ThriftShop::Action::PetitionGradeLegend, :optional => true},
        GRADES_PUBLISHED => {:type => ::Thrift::Types::BOOL, :name => 'grades_published'},
        TWEET_PREFILL => {:type => ::Thrift::Types::STRING, :name => 'tweet_prefill', :optional => true},
        RICH_TEXT_SUMMARY => {:type => ::Thrift::Types::STRING, :name => 'rich_text_summary', :optional => true},
        EMAIL_SNIPPET => {:type => ::Thrift::Types::STRING, :name => 'email_snippet'},
        INVITATION_PREFILL => {:type => ::Thrift::Types::STRING, :name => 'invitation_prefill', :optional => true},
        REPORT_RECAP => {:type => ::Thrift::Types::STRING, :name => 'report_recap'},
        RICH_TEXT_REPORT_RECAP => {:type => ::Thrift::Types::STRING, :name => 'rich_text_report_recap'},
        TARGET_TYPES => {:type => ::Thrift::Types::LIST, :name => 'target_types', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::Action::PetitionTargetType}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionGradeCount
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1
      SUCCESS_COUNT = 2
      NEUTRAL_COUNT = 3
      FAILURE_COUNT = 4
      UNGRADED_COUNT = 5

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        SUCCESS_COUNT => {:type => ::Thrift::Types::I32, :name => 'success_count'},
        NEUTRAL_COUNT => {:type => ::Thrift::Types::I32, :name => 'neutral_count'},
        FAILURE_COUNT => {:type => ::Thrift::Types::I32, :name => 'failure_count'},
        UNGRADED_COUNT => {:type => ::Thrift::Types::I32, :name => 'ungraded_count'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionGradeCounts
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_GRADE_COUNTS = 1

      FIELDS = {
        PETITION_GRADE_COUNTS => {:type => ::Thrift::Types::LIST, :name => 'petition_grade_counts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionGradeCount}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          PetitionUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class Petitions
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITIONS = 1

      FIELDS = {
        PETITIONS => {:type => ::Thrift::Types::LIST, :name => 'petitions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::Petition}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedPetitions
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      PETITIONS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        PETITIONS => {:type => ::Thrift::Types::LIST, :name => 'petitions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::Petition}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionSignature
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      ENTITY_UUID = 2
      PETITION_UID = 3
      CREATED_AT = 4

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        CREATED_AT => {:type => ::Thrift::Types::STRING, :name => 'created_at'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionSignatureCount
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1
      SIGNATURE_COUNT = 2

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        SIGNATURE_COUNT => {:type => ::Thrift::Types::I32, :name => 'signature_count'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionSignatureCounts
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_SIGNATURE_COUNTS = 1

      FIELDS = {
        PETITION_SIGNATURE_COUNTS => {:type => ::Thrift::Types::LIST, :name => 'petition_signature_counts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionSignatureCount}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EntityPetitionIdentifier
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      PETITION_UID = 2

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionSignatureFilterIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def entity_petition_identifiers(val)
          PetitionSignatureFilterIdentifiers.new(:entity_petition_identifiers, val)
        end
      end

      ENTITY_PETITION_IDENTIFIERS = 1

      FIELDS = {
        ENTITY_PETITION_IDENTIFIERS => {:type => ::Thrift::Types::LIST, :name => 'entity_petition_identifiers', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::EntityPetitionIdentifier}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class FilteredPetitionSignatureIdentifiers
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILTERED_IDENTIFIERS = 1

      FIELDS = {
        FILTERED_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'filtered_identifiers', :class => ::ThriftShop::Action::PetitionSignatureFilterIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedPetitionSignatures
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      PETITION_SIGNATURES = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        PETITION_SIGNATURES => {:type => ::Thrift::Types::LIST, :name => 'petition_signatures', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionSignature}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionTermTarget
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 3
      PETITION_UID = 1
      TERM_UID = 2
      GRADE = 4
      GRADE_REASON = 5
      RICH_TEXT_GRADE_REASON = 6

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        TERM_UID => {:type => ::Thrift::Types::STRING, :name => 'term_uid'},
        GRADE => {:type => ::Thrift::Types::I32, :name => 'grade', :optional => true, :enum_class => ::ThriftShop::Action::PetitionTargetGrade},
        GRADE_REASON => {:type => ::Thrift::Types::STRING, :name => 'grade_reason', :optional => true},
        RICH_TEXT_GRADE_REASON => {:type => ::Thrift::Types::STRING, :name => 'rich_text_grade_reason', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @grade.nil? || ::ThriftShop::Action::PetitionTargetGrade::VALID_VALUES.include?(@grade)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field grade!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionCandidacyTarget
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 3
      PETITION_UID = 1
      CANDIDACY_UID = 2
      GRADE = 4
      GRADE_REASON = 5
      RICH_TEXT_GRADE_REASON = 6

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        CANDIDACY_UID => {:type => ::Thrift::Types::STRING, :name => 'candidacy_uid'},
        GRADE => {:type => ::Thrift::Types::I32, :name => 'grade', :optional => true, :enum_class => ::ThriftShop::Action::PetitionTargetGrade},
        GRADE_REASON => {:type => ::Thrift::Types::STRING, :name => 'grade_reason', :optional => true},
        RICH_TEXT_GRADE_REASON => {:type => ::Thrift::Types::STRING, :name => 'rich_text_grade_reason', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @grade.nil? || ::ThriftShop::Action::PetitionTargetGrade::VALID_VALUES.include?(@grade)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field grade!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionTarget < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def term_target(val)
          PetitionTarget.new(:term_target, val)
        end

        def candidacy_target(val)
          PetitionTarget.new(:candidacy_target, val)
        end
      end

      TERM_TARGET = 1
      CANDIDACY_TARGET = 2

      FIELDS = {
        TERM_TARGET => {:type => ::Thrift::Types::STRUCT, :name => 'term_target', :class => ::ThriftShop::Action::PetitionTermTarget, :optional => true},
        CANDIDACY_TARGET => {:type => ::Thrift::Types::STRUCT, :name => 'candidacy_target', :class => ::ThriftShop::Action::PetitionCandidacyTarget, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class PaginatedPetitionTargets
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      PETITION_TARGETS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        PETITION_TARGETS => {:type => ::Thrift::Types::LIST, :name => 'petition_targets', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionTarget}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AddTermTargetItem
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TERM_UID = 1
      DISTRICT_UID = 2

      FIELDS = {
        TERM_UID => {:type => ::Thrift::Types::STRING, :name => 'term_uid'},
        DISTRICT_UID => {:type => ::Thrift::Types::STRING, :name => 'district_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AddCandidacyTargetItem
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CANDIDACY_UID = 1
      DISTRICT_UID = 2

      FIELDS = {
        CANDIDACY_UID => {:type => ::Thrift::Types::STRING, :name => 'candidacy_uid'},
        DISTRICT_UID => {:type => ::Thrift::Types::STRING, :name => 'district_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GradePetitionTargetsItem
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_TARGET_UID = 1
      PETITION_TARGET_TYPE = 2
      PETITION_TARGET_GRADE = 3
      PETITION_TARGET_GRADE_REASON = 4
      PETITION_TARGET_RICH_TEXT_GRADE_REASON = 5

      FIELDS = {
        PETITION_TARGET_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_target_uid'},
        PETITION_TARGET_TYPE => {:type => ::Thrift::Types::I32, :name => 'petition_target_type', :enum_class => ::ThriftShop::Action::PetitionTargetType},
        PETITION_TARGET_GRADE => {:type => ::Thrift::Types::I32, :name => 'petition_target_grade', :optional => true, :enum_class => ::ThriftShop::Action::PetitionTargetGrade},
        PETITION_TARGET_GRADE_REASON => {:type => ::Thrift::Types::STRING, :name => 'petition_target_grade_reason', :optional => true},
        PETITION_TARGET_RICH_TEXT_GRADE_REASON => {:type => ::Thrift::Types::STRING, :name => 'petition_target_rich_text_grade_reason', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @petition_target_type.nil? || ::ThriftShop::Action::PetitionTargetType::VALID_VALUES.include?(@petition_target_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field petition_target_type!')
        end
        unless @petition_target_grade.nil? || ::ThriftShop::Action::PetitionTargetGrade::VALID_VALUES.include?(@petition_target_grade)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field petition_target_grade!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EntityTermPetitionGradeCount
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      TERM_UID = 2
      SUCCESS_COUNT = 3
      FAILURE_COUNT = 4
      NEUTRAL_COUNT = 5

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        TERM_UID => {:type => ::Thrift::Types::STRING, :name => 'term_uid'},
        SUCCESS_COUNT => {:type => ::Thrift::Types::I32, :name => 'success_count'},
        FAILURE_COUNT => {:type => ::Thrift::Types::I32, :name => 'failure_count'},
        NEUTRAL_COUNT => {:type => ::Thrift::Types::I32, :name => 'neutral_count'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionTargets
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_TARGETS = 1

      FIELDS = {
        PETITION_TARGETS => {:type => ::Thrift::Types::LIST, :name => 'petition_targets', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionTarget}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EventUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          EventUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class Event
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      TITLE = 2
      START_DATE = 3
      END_DATE = 4
      LOCATION = 5
      DESCRIPTION = 6
      RICH_TEXT_DESCRIPTION = 7
      IMAGE = 8
      CREATOR_ENTITY_UUID = 9
      IS_APPROVED = 10
      COST = 11
      EXTERNAL_LINK_URL = 12

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
        START_DATE => {:type => ::Thrift::Types::STRING, :name => 'start_date'},
        END_DATE => {:type => ::Thrift::Types::STRING, :name => 'end_date'},
        LOCATION => {:type => ::Thrift::Types::STRING, :name => 'location'},
        DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'},
        RICH_TEXT_DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'rich_text_description'},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image'},
        CREATOR_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'creator_entity_uuid'},
        IS_APPROVED => {:type => ::Thrift::Types::BOOL, :name => 'is_approved'},
        COST => {:type => ::Thrift::Types::STRING, :name => 'cost'},
        EXTERNAL_LINK_URL => {:type => ::Thrift::Types::STRING, :name => 'external_link_url'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Events
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EVENTS = 1

      FIELDS = {
        EVENTS => {:type => ::Thrift::Types::LIST, :name => 'events', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::Event}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedEvents
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      EVENTS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        EVENTS => {:type => ::Thrift::Types::LIST, :name => 'events', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::Event}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedAttendeeUids
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      ATTENDEE_UIDS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        ATTENDEE_UIDS => {:type => ::Thrift::Types::LIST, :name => 'attendee_uids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetEntitySignaturesFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UIDS = 1
      GRADED = 2
      TYPED_TARGET_UIDS = 4
      TERM_UIDS = 3

      FIELDS = {
        PETITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'petition_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        GRADED => {:type => ::Thrift::Types::BOOL, :name => 'graded', :optional => true},
        TYPED_TARGET_UIDS => {:type => ::Thrift::Types::LIST, :name => 'typed_target_uids', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionTypedTargetUid}, :optional => true},
        TERM_UIDS => {:type => ::Thrift::Types::LIST, :name => 'term_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionsFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UIDS = 1
      LIFECYCLE_STATES = 4
      SIGNED_BY_ENTITY_UUIDS = 5
      UNSIGNED_BY_ENTITY_UUID = 6
      TYPED_TARGET_UIDS = 7
      TERM_UIDS = 3

      FIELDS = {
        PETITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'petition_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        LIFECYCLE_STATES => {:type => ::Thrift::Types::LIST, :name => 'lifecycle_states', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::Action::PetitionLifecycleState}, :optional => true},
        SIGNED_BY_ENTITY_UUIDS => {:type => ::Thrift::Types::LIST, :name => 'signed_by_entity_uuids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        UNSIGNED_BY_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'unsigned_by_entity_uuid', :optional => true},
        TYPED_TARGET_UIDS => {:type => ::Thrift::Types::LIST, :name => 'typed_target_uids', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::PetitionTypedTargetUid}, :optional => true},
        TERM_UIDS => {:type => ::Thrift::Types::LIST, :name => 'term_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionTargetsFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TARGET_TYPES = 1
      PETITION_UIDS = 4
      PETITION_TARGET_UIDS = 5
      DISTRICT_UIDS = 6
      EXCLUDE_DISTRICT_UIDS = 7
      EXCLUDE_TERM_UIDS = 2
      TERM_UIDS = 3

      FIELDS = {
        TARGET_TYPES => {:type => ::Thrift::Types::LIST, :name => 'target_types', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::Action::PetitionTargetType}, :optional => true},
        PETITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'petition_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        PETITION_TARGET_UIDS => {:type => ::Thrift::Types::LIST, :name => 'petition_target_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        DISTRICT_UIDS => {:type => ::Thrift::Types::LIST, :name => 'district_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        EXCLUDE_DISTRICT_UIDS => {:type => ::Thrift::Types::LIST, :name => 'exclude_district_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        EXCLUDE_TERM_UIDS => {:type => ::Thrift::Types::LIST, :name => 'exclude_term_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        TERM_UIDS => {:type => ::Thrift::Types::LIST, :name => 'term_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetEntitySignaturesSortParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SORT_FIELD = 1
      SORT_ORDER = 2

      FIELDS = {
        SORT_FIELD => {:type => ::Thrift::Types::I32, :name => 'sort_field', :enum_class => ::ThriftShop::Action::GetEntitySignaturesSortField},
        SORT_ORDER => {:type => ::Thrift::Types::I32, :name => 'sort_order', :enum_class => ::ThriftShop::Shared::SortOrder}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @sort_field.nil? || ::ThriftShop::Action::GetEntitySignaturesSortField::VALID_VALUES.include?(@sort_field)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sort_field!')
        end
        unless @sort_order.nil? || ::ThriftShop::Shared::SortOrder::VALID_VALUES.include?(@sort_order)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sort_order!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionsSortParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SORT_FIELD = 1
      SORT_ORDER = 2

      FIELDS = {
        SORT_FIELD => {:type => ::Thrift::Types::I32, :name => 'sort_field', :enum_class => ::ThriftShop::Action::GetPetitionsSortField},
        SORT_ORDER => {:type => ::Thrift::Types::I32, :name => 'sort_order', :enum_class => ::ThriftShop::Action::GetPetitionsSortOrder}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @sort_field.nil? || ::ThriftShop::Action::GetPetitionsSortField::VALID_VALUES.include?(@sort_field)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sort_field!')
        end
        unless @sort_order.nil? || ::ThriftShop::Action::GetPetitionsSortOrder::VALID_VALUES.include?(@sort_order)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sort_order!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionTargetUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          PetitionTargetUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class AddPetitionCandidacyTargetsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1
      CANDIDACY_TARGETS = 2

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        CANDIDACY_TARGETS => {:type => ::Thrift::Types::LIST, :name => 'candidacy_targets', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::AddCandidacyTargetItem}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AddPetitionTermTargetsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1
      TERM_TARGETS = 2

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        TERM_TARGETS => {:type => ::Thrift::Types::LIST, :name => 'term_targets', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::AddTermTargetItem}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ClosePetitionRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CreatePetitionSignatureRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      ENTITY_DISTRICT_UIDS = 2
      PETITION_UID = 3

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        ENTITY_DISTRICT_UIDS => {:type => ::Thrift::Types::LIST, :name => 'entity_district_uids', :element => {:type => ::Thrift::Types::STRING}},
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CreatePetitionRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TITLE = 1
      SUMMARY = 2
      DESCRIPTION = 3
      TARGET_DESCRIPTION = 4
      IMAGE = 5
      SIGNATURE_GOAL = 6
      DEADLINE = 7
      GRADE_LEGEND = 8
      TWEET_PREFILL = 9
      RICH_TEXT_SUMMARY = 10
      EMAIL_SNIPPET = 11
      INVITATION_PREFILL = 12
      REPORT_RECAP = 13
      RICH_TEXT_REPORT_RECAP = 14

      FIELDS = {
        TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
        SUMMARY => {:type => ::Thrift::Types::STRING, :name => 'summary'},
        DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true},
        TARGET_DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'target_description'},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image'},
        SIGNATURE_GOAL => {:type => ::Thrift::Types::I32, :name => 'signature_goal'},
        DEADLINE => {:type => ::Thrift::Types::STRING, :name => 'deadline'},
        GRADE_LEGEND => {:type => ::Thrift::Types::STRUCT, :name => 'grade_legend', :class => ::ThriftShop::Action::PetitionGradeLegend, :optional => true},
        TWEET_PREFILL => {:type => ::Thrift::Types::STRING, :name => 'tweet_prefill', :optional => true},
        RICH_TEXT_SUMMARY => {:type => ::Thrift::Types::STRING, :name => 'rich_text_summary', :optional => true},
        EMAIL_SNIPPET => {:type => ::Thrift::Types::STRING, :name => 'email_snippet'},
        INVITATION_PREFILL => {:type => ::Thrift::Types::STRING, :name => 'invitation_prefill', :optional => true},
        REPORT_RECAP => {:type => ::Thrift::Types::STRING, :name => 'report_recap'},
        RICH_TEXT_REPORT_RECAP => {:type => ::Thrift::Types::STRING, :name => 'rich_text_report_recap'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EditPetitionRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      TITLE = 2
      SUMMARY = 3
      DESCRIPTION = 4
      TARGET_DESCRIPTION = 5
      IMAGE = 6
      SIGNATURE_GOAL = 7
      DEADLINE = 8
      GRADE_LEGEND = 9
      TWEET_PREFILL = 10
      RICH_TEXT_SUMMARY = 11
      EMAIL_SNIPPET = 12
      INVITATION_PREFILL = 13
      REPORT_RECAP = 14
      RICH_TEXT_REPORT_RECAP = 15

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        TITLE => {:type => ::Thrift::Types::STRING, :name => 'title', :optional => true},
        SUMMARY => {:type => ::Thrift::Types::STRING, :name => 'summary', :optional => true},
        DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true},
        TARGET_DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'target_description', :optional => true},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image', :optional => true},
        SIGNATURE_GOAL => {:type => ::Thrift::Types::I32, :name => 'signature_goal', :optional => true},
        DEADLINE => {:type => ::Thrift::Types::STRING, :name => 'deadline', :optional => true},
        GRADE_LEGEND => {:type => ::Thrift::Types::STRUCT, :name => 'grade_legend', :class => ::ThriftShop::Action::PetitionGradeLegend, :optional => true},
        TWEET_PREFILL => {:type => ::Thrift::Types::STRING, :name => 'tweet_prefill', :optional => true},
        RICH_TEXT_SUMMARY => {:type => ::Thrift::Types::STRING, :name => 'rich_text_summary', :optional => true},
        EMAIL_SNIPPET => {:type => ::Thrift::Types::STRING, :name => 'email_snippet', :optional => true},
        INVITATION_PREFILL => {:type => ::Thrift::Types::STRING, :name => 'invitation_prefill', :optional => true},
        REPORT_RECAP => {:type => ::Thrift::Types::STRING, :name => 'report_recap'},
        RICH_TEXT_REPORT_RECAP => {:type => ::Thrift::Types::STRING, :name => 'rich_text_report_recap'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FilterPetitionSignatureIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILTER_IDENTIFIERS = 1

      FIELDS = {
        FILTER_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_identifiers', :class => ::ThriftShop::Action::PetitionSignatureFilterIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FilterTermsByEntityActionsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      TERM_UIDS = 2
      FILTER_OPTION = 3
      PETITION_UIDS = 4

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        TERM_UIDS => {:type => ::Thrift::Types::LIST, :name => 'term_uids', :element => {:type => ::Thrift::Types::STRING}},
        FILTER_OPTION => {:type => ::Thrift::Types::I32, :name => 'filter_option', :enum_class => ::ThriftShop::Action::FilterTermsByEntityActionsOption},
        PETITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'petition_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @filter_option.nil? || ::ThriftShop::Action::FilterTermsByEntityActionsOption::VALID_VALUES.include?(@filter_option)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field filter_option!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetEntitySignaturesRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      PAGINATION_PARAMS = 2
      FILTER_PARAMS = 3
      SORT_PARAMS = 4

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::Action::GetEntitySignaturesFilterParams, :optional => true},
        SORT_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'sort_params', :class => ::ThriftShop::Action::GetEntitySignaturesSortParams, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetEntityTermPetitionGradeCountsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      TERM_UIDS = 2

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        TERM_UIDS => {:type => ::Thrift::Types::LIST, :name => 'term_uids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetMatchingPetitionTermTargetsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1
      TERM_UIDS = 2

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        TERM_UIDS => {:type => ::Thrift::Types::LIST, :name => 'term_uids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionGradeCountsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UIDS = 1

      FIELDS = {
        PETITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'petition_uids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionsByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_IDENTIFIERS = 1

      FIELDS = {
        PETITION_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'petition_identifiers', :class => ::ThriftShop::Action::PetitionUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionSignatureCountsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UIDS = 1

      FIELDS = {
        PETITION_UIDS => {:type => ::Thrift::Types::LIST, :name => 'petition_uids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionSignaturesRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1
      ENTITY_UUIDS = 2
      PAGINATION_PARAMS = 3

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        ENTITY_UUIDS => {:type => ::Thrift::Types::LIST, :name => 'entity_uuids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 3
      FILTER_PARAMS = 4
      SORT_PARAMS = 5

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::Action::GetPetitionsFilterParams, :optional => true},
        SORT_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'sort_params', :class => ::ThriftShop::Action::GetPetitionsSortParams, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionTargetsByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_TARGET_IDENTIFIERS = 1

      FIELDS = {
        PETITION_TARGET_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'petition_target_identifiers', :class => ::ThriftShop::Action::PetitionTargetUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionTargetSignaturesCountRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_TARGET_UID = 1

      FIELDS = {
        PETITION_TARGET_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_target_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPetitionTargetsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 2
      FILTER_PARAMS = 4

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::Action::GetPetitionTargetsFilterParams, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GradePetitionTargetsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      GRADED_ITEMS = 1

      FIELDS = {
        GRADED_ITEMS => {:type => ::Thrift::Types::LIST, :name => 'graded_items', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Action::GradePetitionTargetsItem}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class IsPermittedToSignPetitionRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1
      ENTITY_DISTRICT_UIDS = 2

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'},
        ENTITY_DISTRICT_UIDS => {:type => ::Thrift::Types::LIST, :name => 'entity_district_uids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class LaunchPetitionRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PublishPetitionGradesRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RemovePetitionCandidacyTargetRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 3

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RemovePetitionTermTargetRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 3

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SendGradingNotificationsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PETITION_UID = 1

      FIELDS = {
        PETITION_UID => {:type => ::Thrift::Types::STRING, :name => 'petition_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetEventsByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EVENT_IDENTIFIERS = 1

      FIELDS = {
        EVENT_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'event_identifiers', :class => ::ThriftShop::Action::EventUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetEventsFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CAMPAIGN_UIDS = 1
      SHOW_ONLY_UPCOMING = 2

      FIELDS = {
        CAMPAIGN_UIDS => {:type => ::Thrift::Types::LIST, :name => 'campaign_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        SHOW_ONLY_UPCOMING => {:type => ::Thrift::Types::BOOL, :name => 'show_only_upcoming', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetEventsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      FILTER_PARAMS = 2

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::Action::GetEventsFilterParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CreateEventRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TITLE = 1
      START_DATE = 2
      END_DATE = 3
      LOCATION = 4
      DESCRIPTION = 5
      RICH_TEXT_DESCRIPTION = 6
      IMAGE = 7
      COST = 8
      EXTERNAL_LINK_URL = 9

      FIELDS = {
        TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
        START_DATE => {:type => ::Thrift::Types::STRING, :name => 'start_date'},
        END_DATE => {:type => ::Thrift::Types::STRING, :name => 'end_date'},
        LOCATION => {:type => ::Thrift::Types::STRING, :name => 'location'},
        DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'},
        RICH_TEXT_DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'rich_text_description'},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image'},
        COST => {:type => ::Thrift::Types::STRING, :name => 'cost'},
        EXTERNAL_LINK_URL => {:type => ::Thrift::Types::STRING, :name => 'external_link_url'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DeleteEventRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EVENT_UID = 1

      FIELDS = {
        EVENT_UID => {:type => ::Thrift::Types::STRING, :name => 'event_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetEventAttendeeUidsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      EVENT_UID = 2

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        EVENT_UID => {:type => ::Thrift::Types::STRING, :name => 'event_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AttendEventRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      EVENT_UID = 1

      FIELDS = {
        EVENT_UID => {:type => ::Thrift::Types::STRING, :name => 'event_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PetitionStateException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      CODE = 2
      EXCEPTION_CLASS = 3

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ThriftShop::Action::PetitionStateExceptionCode},
        EXCEPTION_CLASS => {:type => ::Thrift::Types::I32, :name => 'exception_class', :default =>         0, :enum_class => ::ThriftShop::Shared::ExceptionClass}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @code.nil? || ::ThriftShop::Action::PetitionStateExceptionCode::VALID_VALUES.include?(@code)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
        end
        unless @exception_class.nil? || ::ThriftShop::Shared::ExceptionClass::VALID_VALUES.include?(@exception_class)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field exception_class!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
