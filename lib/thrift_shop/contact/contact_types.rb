#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/contact_types/contact_types_types'
require 'thrift_shop/campaign/campaign_types'
require 'thrift_shop/shared/shared_types'
require 'thrift_shop/event_bus/event_bus_types'
require 'thrift_shop/experiment/experiment_types'


module ThriftShop
  module Contact
    module ContactSource
      FACEBOOK = 0
      CAUSES = 1
      IOS = 2
      ANDROID = 3
      GMAIL = 4
      YAHOO = 5
      MANUAL = 6
      BRIGADE = 7
      VALUE_MAP = {0 => "FACEBOOK", 1 => "CAUSES", 2 => "IOS", 3 => "ANDROID", 4 => "GMAIL", 5 => "YAHOO", 6 => "MANUAL", 7 => "BRIGADE"}
      VALID_VALUES = Set.new([FACEBOOK, CAUSES, IOS, ANDROID, GMAIL, YAHOO, MANUAL, BRIGADE]).freeze
    end

    module RankingContext
      ACTION_PETITION = 0
      POSITIONS_FOR_TOPIC = 1
      VALUE_MAP = {0 => "ACTION_PETITION", 1 => "POSITIONS_FOR_TOPIC"}
      VALID_VALUES = Set.new([ACTION_PETITION, POSITIONS_FOR_TOPIC]).freeze
    end

    module RankingContextAssociationType
      PETITION = 0
      TOPIC = 1
      VALUE_MAP = {0 => "PETITION", 1 => "TOPIC"}
      VALID_VALUES = Set.new([PETITION, TOPIC]).freeze
    end

    module ContactFilter
      EMAIL = 0
      PHONE_NUMBER = 1
      VALUE_MAP = {0 => "EMAIL", 1 => "PHONE_NUMBER"}
      VALID_VALUES = Set.new([EMAIL, PHONE_NUMBER]).freeze
    end

    module OnPlatformFilter
      BRIGADE = 0
      CAUSES = 1
      OFF_SITE = 2
      OFF_SITE_WITH_CAUSES = 3
      VALUE_MAP = {0 => "BRIGADE", 1 => "CAUSES", 2 => "OFF_SITE", 3 => "OFF_SITE_WITH_CAUSES"}
      VALID_VALUES = Set.new([BRIGADE, CAUSES, OFF_SITE, OFF_SITE_WITH_CAUSES]).freeze
    end

    class PoliticalContext
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TOPIC_UIDS = 2
      CAMPAIGN_IDEOLOGY_BUCKETS = 3

      FIELDS = {
        TOPIC_UIDS => {:type => ::Thrift::Types::LIST, :name => 'topic_uids', :element => {:type => ::Thrift::Types::STRING}},
        CAMPAIGN_IDEOLOGY_BUCKETS => {:type => ::Thrift::Types::LIST, :name => 'campaign_ideology_buckets', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::Campaign::IdeologyBucket}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class RankingMetadata < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def political_context(val)
          RankingMetadata.new(:political_context, val)
        end
      end

      POLITICAL_CONTEXT = 1

      FIELDS = {
        POLITICAL_CONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'political_context', :class => ::ThriftShop::Contact::PoliticalContext, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class EmailDetail
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CONTACT_INSTANCE_EMAIL_ADDRESS_UID = 1
      CONTEXT = 2
      EMAIL_ADDRESS = 3

      FIELDS = {
        CONTACT_INSTANCE_EMAIL_ADDRESS_UID => {:type => ::Thrift::Types::STRING, :name => 'contact_instance_email_address_uid'},
        CONTEXT => {:type => ::Thrift::Types::STRING, :name => 'context'},
        EMAIL_ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'email_address', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ContactInstance
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      DISPLAY_NAME = 2
      RECOMMENDATION_CONTEXT = 3
      RECOMMENDED = 4
      FIRST_NAME = 5
      LAST_NAME = 6
      CAUSES_ID = 7
      FACEBOOK_ID = 8
      ENTITY_UUID = 9
      AVATAR_URL = 10
      EMAIL_DETAILS = 11
      PHONE_NUMBERS = 12

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        DISPLAY_NAME => {:type => ::Thrift::Types::STRING, :name => 'display_name'},
        RECOMMENDATION_CONTEXT => {:type => ::Thrift::Types::STRING, :name => 'recommendation_context', :optional => true},
        RECOMMENDED => {:type => ::Thrift::Types::BOOL, :name => 'recommended'},
        FIRST_NAME => {:type => ::Thrift::Types::STRING, :name => 'first_name', :optional => true},
        LAST_NAME => {:type => ::Thrift::Types::STRING, :name => 'last_name', :optional => true},
        CAUSES_ID => {:type => ::Thrift::Types::I32, :name => 'causes_id', :optional => true},
        FACEBOOK_ID => {:type => ::Thrift::Types::STRING, :name => 'facebook_id', :optional => true},
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid', :optional => true},
        AVATAR_URL => {:type => ::Thrift::Types::STRING, :name => 'avatar_url', :optional => true},
        EMAIL_DETAILS => {:type => ::Thrift::Types::LIST, :name => 'email_details', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Contact::EmailDetail}},
        PHONE_NUMBERS => {:type => ::Thrift::Types::LIST, :name => 'phone_numbers', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EmailLookup
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CONTACT_INSTANCE_EMAIL_ADDRESS_UID = 1
      EMAIL_ADDRESS = 2
      CONTACT_INSTANCE_UID = 3
      FULL_NAME = 4

      FIELDS = {
        CONTACT_INSTANCE_EMAIL_ADDRESS_UID => {:type => ::Thrift::Types::STRING, :name => 'contact_instance_email_address_uid'},
        EMAIL_ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'email_address'},
        CONTACT_INSTANCE_UID => {:type => ::Thrift::Types::STRING, :name => 'contact_instance_uid'},
        FULL_NAME => {:type => ::Thrift::Types::STRING, :name => 'full_name', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ContactLocation < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def location(val)
          ContactLocation.new(:location, val)
        end

        def location_blob(val)
          ContactLocation.new(:location_blob, val)
        end
      end

      LOCATION = 1
      LOCATION_BLOB = 2

      FIELDS = {
        LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::ThriftShop::ContactTypes::Location, :optional => true},
        LOCATION_BLOB => {:type => ::Thrift::Types::STRING, :name => 'location_blob', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class ContactAddition
      include ::Thrift::Struct, ::Thrift::Struct_Union
      OWNER_ENTITY_UUID = 1
      SOURCE = 2
      EMAIL_ADDRESSES = 3
      PHONE_NUMBERS = 4
      FULL_NAME = 5
      TIMES_CONTACTED = 6
      MOST_RECENT_CONTACT = 7
      MOST_RECENT_RECRUIT_AT = 16
      LAST_ACTIVE_AT = 17
      TIMES_RECRUITING = 18
      CAUSES_ID = 8
      ENTITY_UUID = 10
      FIRST_NAME = 11
      LAST_NAME = 12
      LOCATION = 13
      FACEBOOK_ID = 14
      AVATAR_URL = 15

      FIELDS = {
        OWNER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'owner_entity_uuid'},
        SOURCE => {:type => ::Thrift::Types::I32, :name => 'source', :enum_class => ::ThriftShop::Contact::ContactSource},
        EMAIL_ADDRESSES => {:type => ::Thrift::Types::LIST, :name => 'email_addresses', :element => {:type => ::Thrift::Types::STRING}},
        PHONE_NUMBERS => {:type => ::Thrift::Types::LIST, :name => 'phone_numbers', :element => {:type => ::Thrift::Types::STRING}},
        FULL_NAME => {:type => ::Thrift::Types::STRING, :name => 'full_name', :optional => true},
        TIMES_CONTACTED => {:type => ::Thrift::Types::I32, :name => 'times_contacted', :optional => true},
        MOST_RECENT_CONTACT => {:type => ::Thrift::Types::I64, :name => 'most_recent_contact', :optional => true},
        MOST_RECENT_RECRUIT_AT => {:type => ::Thrift::Types::I64, :name => 'most_recent_recruit_at', :optional => true},
        LAST_ACTIVE_AT => {:type => ::Thrift::Types::I64, :name => 'last_active_at', :optional => true},
        TIMES_RECRUITING => {:type => ::Thrift::Types::I32, :name => 'times_recruiting', :optional => true},
        CAUSES_ID => {:type => ::Thrift::Types::I32, :name => 'causes_id', :optional => true},
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid', :optional => true},
        FIRST_NAME => {:type => ::Thrift::Types::STRING, :name => 'first_name', :optional => true},
        LAST_NAME => {:type => ::Thrift::Types::STRING, :name => 'last_name', :optional => true},
        LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::ThriftShop::Contact::ContactLocation, :optional => true},
        FACEBOOK_ID => {:type => ::Thrift::Types::STRING, :name => 'facebook_id', :optional => true},
        AVATAR_URL => {:type => ::Thrift::Types::STRING, :name => 'avatar_url', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @source.nil? || ::ThriftShop::Contact::ContactSource::VALID_VALUES.include?(@source)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field source!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ContactRanking
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CONTACT_INSTANCES = 1

      FIELDS = {
        CONTACT_INSTANCES => {:type => ::Thrift::Types::LIST, :name => 'contact_instances', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Contact::ContactInstance}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedContactSet
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      CONTACT_INSTANCES = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        CONTACT_INSTANCES => {:type => ::Thrift::Types::LIST, :name => 'contact_instances', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Contact::ContactInstance}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AddContactsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CONTACT_ADDITIONS = 1
      OWNER_ENTITY_UUID = 2

      FIELDS = {
        CONTACT_ADDITIONS => {:type => ::Thrift::Types::LIST, :name => 'contact_additions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Contact::ContactAddition}},
        OWNER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'owner_entity_uuid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DeleteContactMethodsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      OWNER_ENTITY_UUID = 1
      CONTACT_INSTANCE_UIDS = 2

      FIELDS = {
        OWNER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'owner_entity_uuid'},
        CONTACT_INSTANCE_UIDS => {:type => ::Thrift::Types::LIST, :name => 'contact_instance_uids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetContactRankingRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RANKING_CONTEXT = 1
      RANKING_CONTEXT_ASSOCIATION_TYPE = 2
      RANKING_CONTEXT_ASSOCIATION_UID = 3
      SEARCH_FILTER = 4
      CONTACT_FILTERS = 5
      OWNER_ENTITY_UUID = 6
      OWNER_EXPERIMENT_ASSIGNMENTS = 7
      RANKING_METADATA = 8

      FIELDS = {
        RANKING_CONTEXT => {:type => ::Thrift::Types::I32, :name => 'ranking_context', :enum_class => ::ThriftShop::Contact::RankingContext},
        RANKING_CONTEXT_ASSOCIATION_TYPE => {:type => ::Thrift::Types::I32, :name => 'ranking_context_association_type', :optional => true, :enum_class => ::ThriftShop::Contact::RankingContextAssociationType},
        RANKING_CONTEXT_ASSOCIATION_UID => {:type => ::Thrift::Types::STRING, :name => 'ranking_context_association_uid', :optional => true},
        SEARCH_FILTER => {:type => ::Thrift::Types::STRING, :name => 'search_filter', :optional => true},
        CONTACT_FILTERS => {:type => ::Thrift::Types::LIST, :name => 'contact_filters', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::Contact::ContactFilter}, :optional => true},
        OWNER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'owner_entity_uuid'},
        OWNER_EXPERIMENT_ASSIGNMENTS => {:type => ::Thrift::Types::MAP, :name => 'owner_experiment_assignments', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}, :optional => true},
        RANKING_METADATA => {:type => ::Thrift::Types::LIST, :name => 'ranking_metadata', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Contact::RankingMetadata}}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @ranking_context.nil? || ::ThriftShop::Contact::RankingContext::VALID_VALUES.include?(@ranking_context)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field ranking_context!')
        end
        unless @ranking_context_association_type.nil? || ::ThriftShop::Contact::RankingContextAssociationType::VALID_VALUES.include?(@ranking_context_association_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field ranking_context_association_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetEmailLookupsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CONTACT_INSTANCE_EMAIL_ADDRESS_UIDS = 1
      OWNER_ENTITY_UUID = 2

      FIELDS = {
        CONTACT_INSTANCE_EMAIL_ADDRESS_UIDS => {:type => ::Thrift::Types::LIST, :name => 'contact_instance_email_address_uids', :element => {:type => ::Thrift::Types::STRING}},
        OWNER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'owner_entity_uuid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ContactSetRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SEARCH_FILTER = 1
      CONTACT_FILTERS = 2
      OWNER_ENTITY_UUID = 3
      PAGINATION_PARAMS = 4
      ON_PLATFORM_FILTERS = 5
      SOURCE_FILTERS = 6
      ENTITY_UUIDS = 7
      CONTACT_UIDS = 8

      FIELDS = {
        SEARCH_FILTER => {:type => ::Thrift::Types::STRING, :name => 'search_filter', :optional => true},
        CONTACT_FILTERS => {:type => ::Thrift::Types::LIST, :name => 'contact_filters', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::Contact::ContactFilter}, :optional => true},
        OWNER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'owner_entity_uuid'},
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        ON_PLATFORM_FILTERS => {:type => ::Thrift::Types::LIST, :name => 'on_platform_filters', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::Contact::OnPlatformFilter}, :optional => true},
        SOURCE_FILTERS => {:type => ::Thrift::Types::LIST, :name => 'source_filters', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::Contact::ContactSource}, :optional => true},
        ENTITY_UUIDS => {:type => ::Thrift::Types::LIST, :name => 'entity_uuids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        CONTACT_UIDS => {:type => ::Thrift::Types::LIST, :name => 'contact_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetNetworkDetailsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      OWNER_ENTITY_UUIDS = 1

      FIELDS = {
        OWNER_ENTITY_UUIDS => {:type => ::Thrift::Types::LIST, :name => 'owner_entity_uuids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NetworkDetails
      include ::Thrift::Struct, ::Thrift::Struct_Union
      OWNER_ENTITY_UUID = 1
      TOTAL_CONTACT_COUNT = 2
      ONSITE_CONTACT_COUNT = 3
      OFFSITE_CONTACT_COUNT = 4

      FIELDS = {
        OWNER_ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'owner_entity_uuid'},
        TOTAL_CONTACT_COUNT => {:type => ::Thrift::Types::I32, :name => 'total_contact_count'},
        ONSITE_CONTACT_COUNT => {:type => ::Thrift::Types::I32, :name => 'onsite_contact_count'},
        OFFSITE_CONTACT_COUNT => {:type => ::Thrift::Types::I32, :name => 'offsite_contact_count'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class NetworkDetailsResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NETWORK_DETAILS = 1

      FIELDS = {
        NETWORK_DETAILS => {:type => ::Thrift::Types::LIST, :name => 'network_details', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Contact::NetworkDetails}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ContactOwner
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedContactOwners
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      CONTACT_OWNERS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        CONTACT_OWNERS => {:type => ::Thrift::Types::LIST, :name => 'contact_owners', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Contact::ContactOwner}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetContactOwnersFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CONTACT_ENTITY_UUIDS = 1

      FIELDS = {
        CONTACT_ENTITY_UUIDS => {:type => ::Thrift::Types::LIST, :name => 'contact_entity_uuids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetContactOwnersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILTER_PARAMS = 1
      PAGINATION_PARAMS = 2

      FIELDS = {
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::Contact::GetContactOwnersFilterParams, :optional => true},
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class BackendContactDetails
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CONTACT_INSTANCE_UID = 1
      CONTACT_UID = 2
      FULL_NAME = 3
      FIRST_NAME = 4
      LAST_NAME = 5

      FIELDS = {
        CONTACT_INSTANCE_UID => {:type => ::Thrift::Types::STRING, :name => 'contact_instance_uid'},
        CONTACT_UID => {:type => ::Thrift::Types::STRING, :name => 'contact_uid'},
        FULL_NAME => {:type => ::Thrift::Types::STRING, :name => 'full_name'},
        FIRST_NAME => {:type => ::Thrift::Types::STRING, :name => 'first_name'},
        LAST_NAME => {:type => ::Thrift::Types::STRING, :name => 'last_name'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class BackendContactDetailsResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BACKEND_CONTACT_DETAILS = 1

      FIELDS = {
        BACKEND_CONTACT_DETAILS => {:type => ::Thrift::Types::LIST, :name => 'backend_contact_details', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::Contact::BackendContactDetails}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class BackendContactDetailsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CONTACT_INSTANCE_UIDS = 1

      FIELDS = {
        CONTACT_INSTANCE_UIDS => {:type => ::Thrift::Types::LIST, :name => 'contact_instance_uids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
