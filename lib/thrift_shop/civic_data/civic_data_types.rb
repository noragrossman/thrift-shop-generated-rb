#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/shared/shared_types'
require 'thrift_shop/event_bus/event_bus_types'


module ThriftShop
  module CivicData
    module DistrictLevel
      FEDERAL = 1
      STATE = 2
      LOCAL = 3
      VALUE_MAP = {1 => "FEDERAL", 2 => "STATE", 3 => "LOCAL"}
      VALID_VALUES = Set.new([FEDERAL, STATE, LOCAL]).freeze
    end

    module DivisionType
      COUNTRY = 1
      STATE = 2
      CD = 3
      SLDU = 4
      SLDL = 5
      COUNTY = 6
      PLACE = 7
      COUNCIL_DISTRICT = 8
      VALUE_MAP = {1 => "COUNTRY", 2 => "STATE", 3 => "CD", 4 => "SLDU", 5 => "SLDL", 6 => "COUNTY", 7 => "PLACE", 8 => "COUNCIL_DISTRICT"}
      VALID_VALUES = Set.new([COUNTRY, STATE, CD, SLDU, SLDL, COUNTY, PLACE, COUNCIL_DISTRICT]).freeze
    end

    module GoverningEntityRole
      EXECUTIVE_PRIMARY = 1
      EXECUTIVE_SECONDARY = 2
      EXECUTIVE_TERTIARY = 3
      LEGISLATIVE_UPPER = 4
      LEGISLATIVE_LOWER = 5
      JUDICIAL = 6
      VALUE_MAP = {1 => "EXECUTIVE_PRIMARY", 2 => "EXECUTIVE_SECONDARY", 3 => "EXECUTIVE_TERTIARY", 4 => "LEGISLATIVE_UPPER", 5 => "LEGISLATIVE_LOWER", 6 => "JUDICIAL"}
      VALID_VALUES = Set.new([EXECUTIVE_PRIMARY, EXECUTIVE_SECONDARY, EXECUTIVE_TERTIARY, LEGISLATIVE_UPPER, LEGISLATIVE_LOWER, JUDICIAL]).freeze
    end

    module PoliticianChannelType
      ADDRESS = 1
      EMAIL = 2
      FACEBOOK = 3
      GOOGLE_PLUS = 4
      PHONE = 5
      TWITTER = 6
      WEBSITE = 7
      YOUTUBE = 8
      VALUE_MAP = {1 => "ADDRESS", 2 => "EMAIL", 3 => "FACEBOOK", 4 => "GOOGLE_PLUS", 5 => "PHONE", 6 => "TWITTER", 7 => "WEBSITE", 8 => "YOUTUBE"}
      VALID_VALUES = Set.new([ADDRESS, EMAIL, FACEBOOK, GOOGLE_PLUS, PHONE, TWITTER, WEBSITE, YOUTUBE]).freeze
    end

    module StateCode
      AL = 1
      AK = 2
      AZ = 3
      AR = 4
      CA = 5
      CO = 6
      CT = 7
      DE = 8
      DC = 9
      FL = 10
      GA = 11
      HI = 12
      ID = 13
      IL = 14
      IN = 15
      IA = 16
      KS = 17
      KY = 18
      LA = 19
      ME = 20
      MD = 21
      MA = 22
      MI = 23
      MN = 24
      MS = 25
      MO = 26
      MT = 27
      NE = 28
      NV = 29
      NH = 30
      NJ = 31
      NM = 32
      NY = 33
      NC = 34
      ND = 35
      OH = 36
      OK = 37
      OR = 38
      PA = 39
      RI = 40
      SC = 41
      SD = 42
      TN = 43
      TX = 44
      UT = 45
      VT = 46
      VA = 47
      WA = 48
      WV = 49
      WI = 50
      WY = 51
      VALUE_MAP = {1 => "AL", 2 => "AK", 3 => "AZ", 4 => "AR", 5 => "CA", 6 => "CO", 7 => "CT", 8 => "DE", 9 => "DC", 10 => "FL", 11 => "GA", 12 => "HI", 13 => "ID", 14 => "IL", 15 => "IN", 16 => "IA", 17 => "KS", 18 => "KY", 19 => "LA", 20 => "ME", 21 => "MD", 22 => "MA", 23 => "MI", 24 => "MN", 25 => "MS", 26 => "MO", 27 => "MT", 28 => "NE", 29 => "NV", 30 => "NH", 31 => "NJ", 32 => "NM", 33 => "NY", 34 => "NC", 35 => "ND", 36 => "OH", 37 => "OK", 38 => "OR", 39 => "PA", 40 => "RI", 41 => "SC", 42 => "SD", 43 => "TN", 44 => "TX", 45 => "UT", 46 => "VT", 47 => "VA", 48 => "WA", 49 => "WV", 50 => "WI", 51 => "WY"}
      VALID_VALUES = Set.new([AL, AK, AZ, AR, CA, CO, CT, DE, DC, FL, GA, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MA, MI, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, OH, OK, OR, PA, RI, SC, SD, TN, TX, UT, VT, VA, WA, WV, WI, WY]).freeze
    end

    module GetServedTermsSortField
      POLITICIAN_NAME = 4
      SEAT_NAME = 5
      VALUE_MAP = {4 => "POLITICIAN_NAME", 5 => "SEAT_NAME"}
      VALID_VALUES = Set.new([POLITICIAN_NAME, SEAT_NAME]).freeze
    end

    module GetServedTermsByIdentifiersSortField
      DISTRICT_LEVEL = 1
      DIVISION_TYPE = 2
      VALUE_MAP = {1 => "DISTRICT_LEVEL", 2 => "DIVISION_TYPE"}
      VALID_VALUES = Set.new([DISTRICT_LEVEL, DIVISION_TYPE]).freeze
    end

    module GetCandidaciesSortField
      POLITICIAN_NAME = 1
      SEAT_NAME = 2
      VALUE_MAP = {1 => "POLITICIAN_NAME", 2 => "SEAT_NAME"}
      VALID_VALUES = Set.new([POLITICIAN_NAME, SEAT_NAME]).freeze
    end

    module CivicInformationApiExceptionCode
      UNKNOWN = 1
      NOT_FOUND = 2
      INVALID_INPUT = 3
      VALUE_MAP = {1 => "UNKNOWN", 2 => "NOT_FOUND", 3 => "INVALID_INPUT"}
      VALID_VALUES = Set.new([UNKNOWN, NOT_FOUND, INVALID_INPUT]).freeze
    end

    class Candidacy
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      RACE_UID = 2
      POLITICIAN_UID = 3
      POLITICAL_PARTY_UID = 4
      CURRENT = 5

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        RACE_UID => {:type => ::Thrift::Types::STRING, :name => 'race_uid'},
        POLITICIAN_UID => {:type => ::Thrift::Types::STRING, :name => 'politician_uid'},
        POLITICAL_PARTY_UID => {:type => ::Thrift::Types::STRING, :name => 'political_party_uid'},
        CURRENT => {:type => ::Thrift::Types::BOOL, :name => 'current'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Candidacies
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CANDIDACIES = 1

      FIELDS = {
        CANDIDACIES => {:type => ::Thrift::Types::LIST, :name => 'candidacies', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Candidacy}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedCandidacies
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      CANDIDACIES = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        CANDIDACIES => {:type => ::Thrift::Types::LIST, :name => 'candidacies', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Candidacy}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CandidacyUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          CandidacyUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class District
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      NAME = 2
      DISTRICT_LEVEL = 3
      OCD_ID = 4
      DIVISION_TYPE = 5
      DESCRIPTION = 6
      SHORT_NAME = 7

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        DISTRICT_LEVEL => {:type => ::Thrift::Types::I32, :name => 'district_level', :enum_class => ::ThriftShop::CivicData::DistrictLevel},
        OCD_ID => {:type => ::Thrift::Types::STRING, :name => 'ocd_id'},
        DIVISION_TYPE => {:type => ::Thrift::Types::I32, :name => 'division_type', :enum_class => ::ThriftShop::CivicData::DivisionType},
        DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description', :optional => true},
        SHORT_NAME => {:type => ::Thrift::Types::STRING, :name => 'short_name'}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @district_level.nil? || ::ThriftShop::CivicData::DistrictLevel::VALID_VALUES.include?(@district_level)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field district_level!')
        end
        unless @division_type.nil? || ::ThriftShop::CivicData::DivisionType::VALID_VALUES.include?(@division_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field division_type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Districts
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DISTRICTS = 1

      FIELDS = {
        DISTRICTS => {:type => ::Thrift::Types::LIST, :name => 'districts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::District}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PoliticalParty
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      NAME = 2
      COLOR = 3
      IMAGE = 4
      DEMONYM = 5

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        COLOR => {:type => ::Thrift::Types::STRING, :name => 'color'},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image', :optional => true},
        DEMONYM => {:type => ::Thrift::Types::STRING, :name => 'demonym'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PoliticianChannel
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      POLITICIAN_UID = 2
      TYPE = 3
      VALUE = 4
      HREF = 5

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        POLITICIAN_UID => {:type => ::Thrift::Types::STRING, :name => 'politician_uid'},
        TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ThriftShop::CivicData::PoliticianChannelType},
        VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'},
        HREF => {:type => ::Thrift::Types::STRING, :name => 'href'}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @type.nil? || ::ThriftShop::CivicData::PoliticianChannelType::VALID_VALUES.include?(@type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PoliticianChannels
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLITICIAN_CHANNELS = 1

      FIELDS = {
        POLITICIAN_CHANNELS => {:type => ::Thrift::Types::LIST, :name => 'politician_channels', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::PoliticianChannel}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PoliticalParties
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLITICAL_PARTIES = 1

      FIELDS = {
        POLITICAL_PARTIES => {:type => ::Thrift::Types::LIST, :name => 'political_parties', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::PoliticalParty}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class AccountableTo < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def district_uid(val)
          AccountableTo.new(:district_uid, val)
        end

        def governing_entity_uid(val)
          AccountableTo.new(:governing_entity_uid, val)
        end
      end

      DISTRICT_UID = 1
      GOVERNING_ENTITY_UID = 2

      FIELDS = {
        DISTRICT_UID => {:type => ::Thrift::Types::STRING, :name => 'district_uid', :optional => true},
        GOVERNING_ENTITY_UID => {:type => ::Thrift::Types::STRING, :name => 'governing_entity_uid', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class Body
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      NAME = 2
      JURISDICTION_UID = 3
      ROLE = 5

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        JURISDICTION_UID => {:type => ::Thrift::Types::STRING, :name => 'jurisdiction_uid'},
        ROLE => {:type => ::Thrift::Types::I32, :name => 'role', :enum_class => ::ThriftShop::CivicData::GoverningEntityRole}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @role.nil? || ::ThriftShop::CivicData::GoverningEntityRole::VALID_VALUES.include?(@role)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field role!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Bodies
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BODIES = 1

      FIELDS = {
        BODIES => {:type => ::Thrift::Types::LIST, :name => 'bodies', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Body}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedBodies
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      BODIES = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        BODIES => {:type => ::Thrift::Types::LIST, :name => 'bodies', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Body}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Seat
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      NAME = 2
      JURISDICTION_UID = 3
      ACCOUNTABLE_TO = 4
      ROLE = 5
      BODY_UID = 6

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        JURISDICTION_UID => {:type => ::Thrift::Types::STRING, :name => 'jurisdiction_uid'},
        ACCOUNTABLE_TO => {:type => ::Thrift::Types::STRUCT, :name => 'accountable_to', :class => ::ThriftShop::CivicData::AccountableTo},
        ROLE => {:type => ::Thrift::Types::I32, :name => 'role', :enum_class => ::ThriftShop::CivicData::GoverningEntityRole},
        BODY_UID => {:type => ::Thrift::Types::STRING, :name => 'body_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @role.nil? || ::ThriftShop::CivicData::GoverningEntityRole::VALID_VALUES.include?(@role)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field role!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Seats
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SEATS = 1

      FIELDS = {
        SEATS => {:type => ::Thrift::Types::LIST, :name => 'seats', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Seat}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedSeats
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      SEATS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        SEATS => {:type => ::Thrift::Types::LIST, :name => 'seats', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Seat}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Section
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      NAME = 2
      JURISDICTION_UID = 3
      ROLE = 5

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        JURISDICTION_UID => {:type => ::Thrift::Types::STRING, :name => 'jurisdiction_uid'},
        ROLE => {:type => ::Thrift::Types::I32, :name => 'role', :enum_class => ::ThriftShop::CivicData::GoverningEntityRole}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @role.nil? || ::ThriftShop::CivicData::GoverningEntityRole::VALID_VALUES.include?(@role)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field role!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GoverningEntity < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def seat(val)
          GoverningEntity.new(:seat, val)
        end

        def section(val)
          GoverningEntity.new(:section, val)
        end

        def body(val)
          GoverningEntity.new(:body, val)
        end
      end

      SEAT = 1
      SECTION = 2
      BODY = 3

      FIELDS = {
        SEAT => {:type => ::Thrift::Types::STRUCT, :name => 'seat', :class => ::ThriftShop::CivicData::Seat, :optional => true},
        SECTION => {:type => ::Thrift::Types::STRUCT, :name => 'section', :class => ::ThriftShop::CivicData::Section, :optional => true},
        BODY => {:type => ::Thrift::Types::STRUCT, :name => 'body', :class => ::ThriftShop::CivicData::Body, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class Politician
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      FULL_NAME = 2
      SHORT_NAME = 3
      IMAGE = 4
      PRONOUN = 5
      SUMMARY = 6

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        FULL_NAME => {:type => ::Thrift::Types::STRING, :name => 'full_name'},
        SHORT_NAME => {:type => ::Thrift::Types::STRING, :name => 'short_name'},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image', :optional => true},
        PRONOUN => {:type => ::Thrift::Types::I32, :name => 'pronoun', :enum_class => ::ThriftShop::Shared::Pronoun},
        SUMMARY => {:type => ::Thrift::Types::STRING, :name => 'summary', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @pronoun.nil? || ::ThriftShop::Shared::Pronoun::VALID_VALUES.include?(@pronoun)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field pronoun!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Politicians
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLITICIANS = 1

      FIELDS = {
        POLITICIANS => {:type => ::Thrift::Types::LIST, :name => 'politicians', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Politician}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedPoliticians
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      POLITICIANS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        POLITICIANS => {:type => ::Thrift::Types::LIST, :name => 'politicians', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Politician}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ServedTerm
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      POLITICIAN_UID = 2
      SEAT_UID = 3
      POLITICAL_PARTY_UID = 4
      CURRENT = 5
      START_DATE = 6
      END_DATE = 7

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        POLITICIAN_UID => {:type => ::Thrift::Types::STRING, :name => 'politician_uid'},
        SEAT_UID => {:type => ::Thrift::Types::STRING, :name => 'seat_uid'},
        POLITICAL_PARTY_UID => {:type => ::Thrift::Types::STRING, :name => 'political_party_uid'},
        CURRENT => {:type => ::Thrift::Types::BOOL, :name => 'current'},
        START_DATE => {:type => ::Thrift::Types::STRING, :name => 'start_date'},
        END_DATE => {:type => ::Thrift::Types::STRING, :name => 'end_date'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class ServedTerms
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SERVED_TERMS = 1

      FIELDS = {
        SERVED_TERMS => {:type => ::Thrift::Types::LIST, :name => 'served_terms', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::ServedTerm}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetServedTermsByIdentifiersSort
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FIELD = 1
      SORT_ORDER = 2

      FIELDS = {
        FIELD => {:type => ::Thrift::Types::I32, :name => 'field', :enum_class => ::ThriftShop::CivicData::GetServedTermsByIdentifiersSortField},
        SORT_ORDER => {:type => ::Thrift::Types::I32, :name => 'sort_order', :enum_class => ::ThriftShop::Shared::SortOrder}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @field.nil? || ::ThriftShop::CivicData::GetServedTermsByIdentifiersSortField::VALID_VALUES.include?(@field)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field field!')
        end
        unless @sort_order.nil? || ::ThriftShop::Shared::SortOrder::VALID_VALUES.include?(@sort_order)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sort_order!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedServedTerms
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      SERVED_TERMS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        SERVED_TERMS => {:type => ::Thrift::Types::LIST, :name => 'served_terms', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::ServedTerm}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Race
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      NAME = 2
      CURRENT = 3
      SEAT_UIDS = 4

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        CURRENT => {:type => ::Thrift::Types::BOOL, :name => 'current'},
        SEAT_UIDS => {:type => ::Thrift::Types::LIST, :name => 'seat_uids', :element => {:type => ::Thrift::Types::STRING}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Races
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RACES = 1

      FIELDS = {
        RACES => {:type => ::Thrift::Types::LIST, :name => 'races', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Race}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedRaces
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      RACES = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        RACES => {:type => ::Thrift::Types::LIST, :name => 'races', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Race}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Election
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      NAME = 2
      RACE_UID = 3
      DATE = 4
      POLITICAL_PARTY_UID = 5
      CURRENT = 6

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        RACE_UID => {:type => ::Thrift::Types::STRING, :name => 'race_uid'},
        DATE => {:type => ::Thrift::Types::STRING, :name => 'date'},
        POLITICAL_PARTY_UID => {:type => ::Thrift::Types::STRING, :name => 'political_party_uid'},
        CURRENT => {:type => ::Thrift::Types::BOOL, :name => 'current'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Elections
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ELECTIONS = 1

      FIELDS = {
        ELECTIONS => {:type => ::Thrift::Types::LIST, :name => 'elections', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Election}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class PaginatedElections
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGE_INFO = 1
      ELECTIONS = 2

      FIELDS = {
        PAGE_INFO => {:type => ::Thrift::Types::STRUCT, :name => 'page_info', :class => ::ThriftShop::Shared::BoundaryLimitPageInfo},
        ELECTIONS => {:type => ::Thrift::Types::LIST, :name => 'elections', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::Election}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetBodiesFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      JURISDICTION_DISTRICT_LEVELS = 1

      FIELDS = {
        JURISDICTION_DISTRICT_LEVELS => {:type => ::Thrift::Types::LIST, :name => 'jurisdiction_district_levels', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::CivicData::DistrictLevel}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetCandidaciesFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CURRENT = 1
      DISTRICT_UIDS = 2
      GOVERNING_BODY_UIDS = 3
      POLITICIAN_UIDS = 4
      POLITICIAN_NAME = 5
      POLITICAL_PARTY_UIDS = 6

      FIELDS = {
        CURRENT => {:type => ::Thrift::Types::BOOL, :name => 'current', :optional => true},
        DISTRICT_UIDS => {:type => ::Thrift::Types::LIST, :name => 'district_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        GOVERNING_BODY_UIDS => {:type => ::Thrift::Types::LIST, :name => 'governing_body_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        POLITICIAN_UIDS => {:type => ::Thrift::Types::LIST, :name => 'politician_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        POLITICIAN_NAME => {:type => ::Thrift::Types::STRING, :name => 'politician_name', :optional => true},
        POLITICAL_PARTY_UIDS => {:type => ::Thrift::Types::LIST, :name => 'political_party_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPoliticalPartiesFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLITICAL_PARTY_UIDS = 1

      FIELDS = {
        POLITICAL_PARTY_UIDS => {:type => ::Thrift::Types::LIST, :name => 'political_party_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPoliticianChannelsFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLITICIAN_CHANNEL_TYPES = 1

      FIELDS = {
        POLITICIAN_CHANNEL_TYPES => {:type => ::Thrift::Types::LIST, :name => 'politician_channel_types', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::CivicData::PoliticianChannelType}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPoliticiansFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MATCHING_NAME = 1

      FIELDS = {
        MATCHING_NAME => {:type => ::Thrift::Types::STRING, :name => 'matching_name', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetSeatsFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ACCOUNTABLE_DISTRICT_DIVISION_TYPE = 1
      STATE_CODE = 2
      ROLES = 3

      FIELDS = {
        ACCOUNTABLE_DISTRICT_DIVISION_TYPE => {:type => ::Thrift::Types::I32, :name => 'accountable_district_division_type', :optional => true, :enum_class => ::ThriftShop::CivicData::DivisionType},
        STATE_CODE => {:type => ::Thrift::Types::I32, :name => 'state_code', :optional => true, :enum_class => ::ThriftShop::CivicData::StateCode},
        ROLES => {:type => ::Thrift::Types::LIST, :name => 'roles', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::CivicData::GoverningEntityRole}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @accountable_district_division_type.nil? || ::ThriftShop::CivicData::DivisionType::VALID_VALUES.include?(@accountable_district_division_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field accountable_district_division_type!')
        end
        unless @state_code.nil? || ::ThriftShop::CivicData::StateCode::VALID_VALUES.include?(@state_code)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field state_code!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetServedTermsFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CURRENT = 1
      DISTRICT_UIDS = 2
      GOVERNING_BODY_UIDS = 3
      POLITICIAN_UIDS = 4
      POLITICIAN_NAME = 5
      POLITICAL_PARTY_UIDS = 6

      FIELDS = {
        CURRENT => {:type => ::Thrift::Types::BOOL, :name => 'current', :optional => true},
        DISTRICT_UIDS => {:type => ::Thrift::Types::LIST, :name => 'district_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        GOVERNING_BODY_UIDS => {:type => ::Thrift::Types::LIST, :name => 'governing_body_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        POLITICIAN_UIDS => {:type => ::Thrift::Types::LIST, :name => 'politician_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true},
        POLITICIAN_NAME => {:type => ::Thrift::Types::STRING, :name => 'politician_name', :optional => true},
        POLITICAL_PARTY_UIDS => {:type => ::Thrift::Types::LIST, :name => 'political_party_uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetRacesFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetElectionsFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetDistrictsForEntityFilterParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DISTRICT_LEVELS = 1

      FIELDS = {
        DISTRICT_LEVELS => {:type => ::Thrift::Types::LIST, :name => 'district_levels', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::CivicData::DistrictLevel}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetServedTermsSortParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SORT_FIELDS = 1
      SORT_ORDER = 2

      FIELDS = {
        SORT_FIELDS => {:type => ::Thrift::Types::LIST, :name => 'sort_fields', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::CivicData::GetServedTermsSortField}},
        SORT_ORDER => {:type => ::Thrift::Types::I32, :name => 'sort_order', :enum_class => ::ThriftShop::Shared::SortOrder}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @sort_order.nil? || ::ThriftShop::Shared::SortOrder::VALID_VALUES.include?(@sort_order)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sort_order!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetServedTermsByIdentifiersSortParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SORTS = 1

      FIELDS = {
        SORTS => {:type => ::Thrift::Types::LIST, :name => 'sorts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftShop::CivicData::GetServedTermsByIdentifiersSort}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetCandidaciesSortParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SORT_FIELDS = 1
      SORT_ORDER = 2

      FIELDS = {
        SORT_FIELDS => {:type => ::Thrift::Types::LIST, :name => 'sort_fields', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftShop::CivicData::GetCandidaciesSortField}},
        SORT_ORDER => {:type => ::Thrift::Types::I32, :name => 'sort_order', :enum_class => ::ThriftShop::Shared::SortOrder}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @sort_order.nil? || ::ThriftShop::Shared::SortOrder::VALID_VALUES.include?(@sort_order)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field sort_order!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class BodyUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          BodyUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class SeatUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          SeatUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class PoliticianUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          PoliticianUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class DistrictUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          DistrictUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class ServedTermUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          ServedTermUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class RaceUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          RaceUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class ElectionUniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def uids(val)
          ElectionUniqueIdentifiers.new(:uids, val)
        end
      end

      UIDS = 1

      FIELDS = {
        UIDS => {:type => ::Thrift::Types::LIST, :name => 'uids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class GetBodiesRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      FILTER_PARAMS = 2

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::CivicData::GetBodiesFilterParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetBodiesByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      BODY_IDENTIFIERS = 1

      FIELDS = {
        BODY_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'body_identifiers', :class => ::ThriftShop::CivicData::BodyUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetCandidaciesRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      FILTER_PARAMS = 2
      SORT_PARAMS = 3

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::CivicData::GetCandidaciesFilterParams},
        SORT_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'sort_params', :class => ::ThriftShop::CivicData::GetCandidaciesSortParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetCandidaciesByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CANDIDACY_IDENTIFIERS = 1

      FIELDS = {
        CANDIDACY_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'candidacy_identifiers', :class => ::ThriftShop::CivicData::CandidacyUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPoliticianChannelsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLITICIAN_UID = 1
      FILTER_PARAMS = 2

      FIELDS = {
        POLITICIAN_UID => {:type => ::Thrift::Types::STRING, :name => 'politician_uid'},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::CivicData::GetPoliticianChannelsFilterParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CreatePoliticianChannelRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLITICIAN_UID = 1
      TYPE = 2
      VALUE = 3

      FIELDS = {
        POLITICIAN_UID => {:type => ::Thrift::Types::STRING, :name => 'politician_uid'},
        TYPE => {:type => ::Thrift::Types::STRING, :name => 'type'},
        VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPoliticalPartiesRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILTER_PARAMS = 1

      FIELDS = {
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::CivicData::GetPoliticalPartiesFilterParams, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CreatePoliticianRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FULL_NAME = 1
      SHORT_NAME = 2
      IMAGE = 3
      PRONOUN = 4
      SUMMARY = 5

      FIELDS = {
        FULL_NAME => {:type => ::Thrift::Types::STRING, :name => 'full_name'},
        SHORT_NAME => {:type => ::Thrift::Types::STRING, :name => 'short_name'},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image', :optional => true},
        PRONOUN => {:type => ::Thrift::Types::I32, :name => 'pronoun', :optional => true, :enum_class => ::ThriftShop::Shared::Pronoun},
        SUMMARY => {:type => ::Thrift::Types::STRING, :name => 'summary', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @pronoun.nil? || ::ThriftShop::Shared::Pronoun::VALID_VALUES.include?(@pronoun)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field pronoun!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EditPoliticianRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      UID = 1
      FULL_NAME = 2
      SHORT_NAME = 3
      IMAGE = 4
      PRONOUN = 5
      SUMMARY = 6

      FIELDS = {
        UID => {:type => ::Thrift::Types::STRING, :name => 'uid'},
        FULL_NAME => {:type => ::Thrift::Types::STRING, :name => 'full_name', :optional => true},
        SHORT_NAME => {:type => ::Thrift::Types::STRING, :name => 'short_name', :optional => true},
        IMAGE => {:type => ::Thrift::Types::STRING, :name => 'image', :optional => true},
        PRONOUN => {:type => ::Thrift::Types::I32, :name => 'pronoun', :optional => true, :enum_class => ::ThriftShop::Shared::Pronoun},
        SUMMARY => {:type => ::Thrift::Types::STRING, :name => 'summary', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @pronoun.nil? || ::ThriftShop::Shared::Pronoun::VALID_VALUES.include?(@pronoun)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field pronoun!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPoliticiansRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      FILTER_PARAMS = 2

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::CivicData::GetPoliticiansFilterParams, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetPoliticiansByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLITICIAN_IDENTIFIERS = 1

      FIELDS = {
        POLITICIAN_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'politician_identifiers', :class => ::ThriftShop::CivicData::PoliticianUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EditPoliticianChannelRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLITICIAN_CHANNEL_UID = 1
      VALUE = 2

      FIELDS = {
        POLITICIAN_CHANNEL_UID => {:type => ::Thrift::Types::STRING, :name => 'politician_channel_uid'},
        VALUE => {:type => ::Thrift::Types::STRING, :name => 'value', :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DeletePoliticianChannelRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POLITICIAN_CHANNEL_UID = 1

      FIELDS = {
        POLITICIAN_CHANNEL_UID => {:type => ::Thrift::Types::STRING, :name => 'politician_channel_uid'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetSeatsByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SEAT_IDENTIFIERS = 1

      FIELDS = {
        SEAT_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'seat_identifiers', :class => ::ThriftShop::CivicData::SeatUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetSeatsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      FILTER_PARAMS = 2

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::CivicData::GetSeatsFilterParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetDistrictsByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DISTRICT_IDENTIFIERS = 1

      FIELDS = {
        DISTRICT_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'district_identifiers', :class => ::ThriftShop::CivicData::DistrictUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetDefaultFederalDistrictRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetServedTermsByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SERVED_TERM_IDENTIFIERS = 1
      SORT_PARAMS = 2

      FIELDS = {
        SERVED_TERM_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'served_term_identifiers', :class => ::ThriftShop::CivicData::ServedTermUniqueIdentifiers},
        SORT_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'sort_params', :class => ::ThriftShop::CivicData::GetServedTermsByIdentifiersSortParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetServedTermsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      FILTER_PARAMS = 2
      SORT_PARAMS = 3

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::CivicData::GetServedTermsFilterParams},
        SORT_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'sort_params', :class => ::ThriftShop::CivicData::GetServedTermsSortParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetRacesByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      RACE_IDENTIFIERS = 1

      FIELDS = {
        RACE_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'race_identifiers', :class => ::ThriftShop::CivicData::RaceUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetRacesRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      FILTER_PARAMS = 2

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::CivicData::GetRacesFilterParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetElectionsByIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ELECTION_IDENTIFIERS = 1

      FIELDS = {
        ELECTION_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'election_identifiers', :class => ::ThriftShop::CivicData::ElectionUniqueIdentifiers}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetElectionsRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PAGINATION_PARAMS = 1
      FILTER_PARAMS = 2

      FIELDS = {
        PAGINATION_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'pagination_params', :class => ::ThriftShop::Shared::BoundaryLimitPaginationParams},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::CivicData::GetElectionsFilterParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class FilterCandidacyIdentifiersRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      CANDIDACY_IDENTIFIERS = 1
      HIDE_PENDING = 2

      FIELDS = {
        CANDIDACY_IDENTIFIERS => {:type => ::Thrift::Types::STRUCT, :name => 'candidacy_identifiers', :class => ::ThriftShop::CivicData::CandidacyUniqueIdentifiers},
        HIDE_PENDING => {:type => ::Thrift::Types::BOOL, :name => 'hide_pending'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class DistrictEntityByAddressRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      ADDRESS = 2

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'address'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class GetDistrictsForEntityRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ENTITY_UUID = 1
      FILTER_PARAMS = 2

      FIELDS = {
        ENTITY_UUID => {:type => ::Thrift::Types::STRING, :name => 'entity_uuid'},
        FILTER_PARAMS => {:type => ::Thrift::Types::STRUCT, :name => 'filter_params', :class => ::ThriftShop::CivicData::GetDistrictsForEntityFilterParams}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CivicInformationApiException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      CODE = 2
      EXCEPTION_CLASS = 3

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ThriftShop::CivicData::CivicInformationApiExceptionCode},
        EXCEPTION_CLASS => {:type => ::Thrift::Types::I32, :name => 'exception_class', :default =>         2, :enum_class => ::ThriftShop::Shared::ExceptionClass}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @code.nil? || ::ThriftShop::CivicData::CivicInformationApiExceptionCode::VALID_VALUES.include?(@code)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
        end
        unless @exception_class.nil? || ::ThriftShop::Shared::ExceptionClass::VALID_VALUES.include?(@exception_class)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field exception_class!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
