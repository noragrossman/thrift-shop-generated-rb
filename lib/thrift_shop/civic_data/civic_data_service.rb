#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_shop/civic_data/civic_data_types'

module ThriftShop
  module CivicData
    module CivicDataService
      class Client
        include ::Thrift::Client

        def get_bodies(headers, request)
          send_get_bodies(headers, request)
          return recv_get_bodies()
        end

        def send_get_bodies(headers, request)
          send_message('get_bodies', Get_bodies_args, :headers => headers, :request => request)
        end

        def recv_get_bodies()
          result = receive_message(Get_bodies_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_bodies failed: unknown result')
        end

        def get_bodies_by_identifiers(headers, request)
          send_get_bodies_by_identifiers(headers, request)
          return recv_get_bodies_by_identifiers()
        end

        def send_get_bodies_by_identifiers(headers, request)
          send_message('get_bodies_by_identifiers', Get_bodies_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_bodies_by_identifiers()
          result = receive_message(Get_bodies_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_bodies_by_identifiers failed: unknown result')
        end

        def get_political_parties(headers, request)
          send_get_political_parties(headers, request)
          return recv_get_political_parties()
        end

        def send_get_political_parties(headers, request)
          send_message('get_political_parties', Get_political_parties_args, :headers => headers, :request => request)
        end

        def recv_get_political_parties()
          result = receive_message(Get_political_parties_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_political_parties failed: unknown result')
        end

        def create_politician(headers, request)
          send_create_politician(headers, request)
          return recv_create_politician()
        end

        def send_create_politician(headers, request)
          send_message('create_politician', Create_politician_args, :headers => headers, :request => request)
        end

        def recv_create_politician()
          result = receive_message(Create_politician_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_politician failed: unknown result')
        end

        def edit_politician(headers, request)
          send_edit_politician(headers, request)
          return recv_edit_politician()
        end

        def send_edit_politician(headers, request)
          send_message('edit_politician', Edit_politician_args, :headers => headers, :request => request)
        end

        def recv_edit_politician()
          result = receive_message(Edit_politician_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'edit_politician failed: unknown result')
        end

        def get_politicians(headers, request)
          send_get_politicians(headers, request)
          return recv_get_politicians()
        end

        def send_get_politicians(headers, request)
          send_message('get_politicians', Get_politicians_args, :headers => headers, :request => request)
        end

        def recv_get_politicians()
          result = receive_message(Get_politicians_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_politicians failed: unknown result')
        end

        def get_politicians_by_identifiers(headers, request)
          send_get_politicians_by_identifiers(headers, request)
          return recv_get_politicians_by_identifiers()
        end

        def send_get_politicians_by_identifiers(headers, request)
          send_message('get_politicians_by_identifiers', Get_politicians_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_politicians_by_identifiers()
          result = receive_message(Get_politicians_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_politicians_by_identifiers failed: unknown result')
        end

        def create_politician_channel(headers, request)
          send_create_politician_channel(headers, request)
          return recv_create_politician_channel()
        end

        def send_create_politician_channel(headers, request)
          send_message('create_politician_channel', Create_politician_channel_args, :headers => headers, :request => request)
        end

        def recv_create_politician_channel()
          result = receive_message(Create_politician_channel_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_politician_channel failed: unknown result')
        end

        def edit_politician_channel(headers, request)
          send_edit_politician_channel(headers, request)
          return recv_edit_politician_channel()
        end

        def send_edit_politician_channel(headers, request)
          send_message('edit_politician_channel', Edit_politician_channel_args, :headers => headers, :request => request)
        end

        def recv_edit_politician_channel()
          result = receive_message(Edit_politician_channel_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'edit_politician_channel failed: unknown result')
        end

        def delete_politician_channel(headers, request)
          send_delete_politician_channel(headers, request)
          recv_delete_politician_channel()
        end

        def send_delete_politician_channel(headers, request)
          send_message('delete_politician_channel', Delete_politician_channel_args, :headers => headers, :request => request)
        end

        def recv_delete_politician_channel()
          result = receive_message(Delete_politician_channel_result)
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          return
        end

        def get_politician_channels(headers, request)
          send_get_politician_channels(headers, request)
          return recv_get_politician_channels()
        end

        def send_get_politician_channels(headers, request)
          send_message('get_politician_channels', Get_politician_channels_args, :headers => headers, :request => request)
        end

        def recv_get_politician_channels()
          result = receive_message(Get_politician_channels_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_politician_channels failed: unknown result')
        end

        def get_seats_by_identifiers(headers, request)
          send_get_seats_by_identifiers(headers, request)
          return recv_get_seats_by_identifiers()
        end

        def send_get_seats_by_identifiers(headers, request)
          send_message('get_seats_by_identifiers', Get_seats_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_seats_by_identifiers()
          result = receive_message(Get_seats_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_seats_by_identifiers failed: unknown result')
        end

        def get_seats(headers, request)
          send_get_seats(headers, request)
          return recv_get_seats()
        end

        def send_get_seats(headers, request)
          send_message('get_seats', Get_seats_args, :headers => headers, :request => request)
        end

        def recv_get_seats()
          result = receive_message(Get_seats_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_seats failed: unknown result')
        end

        def district_entity_by_address(headers, request)
          send_district_entity_by_address(headers, request)
          return recv_district_entity_by_address()
        end

        def send_district_entity_by_address(headers, request)
          send_message('district_entity_by_address', District_entity_by_address_args, :headers => headers, :request => request)
        end

        def recv_district_entity_by_address()
          result = receive_message(District_entity_by_address_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise result.civic_information_api_exception unless result.civic_information_api_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'district_entity_by_address failed: unknown result')
        end

        def get_districts_by_identifiers(headers, request)
          send_get_districts_by_identifiers(headers, request)
          return recv_get_districts_by_identifiers()
        end

        def send_get_districts_by_identifiers(headers, request)
          send_message('get_districts_by_identifiers', Get_districts_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_districts_by_identifiers()
          result = receive_message(Get_districts_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_districts_by_identifiers failed: unknown result')
        end

        def get_default_federal_district(headers, request)
          send_get_default_federal_district(headers, request)
          return recv_get_default_federal_district()
        end

        def send_get_default_federal_district(headers, request)
          send_message('get_default_federal_district', Get_default_federal_district_args, :headers => headers, :request => request)
        end

        def recv_get_default_federal_district()
          result = receive_message(Get_default_federal_district_result)
          return result.success unless result.success.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_default_federal_district failed: unknown result')
        end

        def get_candidacies(headers, request)
          send_get_candidacies(headers, request)
          return recv_get_candidacies()
        end

        def send_get_candidacies(headers, request)
          send_message('get_candidacies', Get_candidacies_args, :headers => headers, :request => request)
        end

        def recv_get_candidacies()
          result = receive_message(Get_candidacies_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_candidacies failed: unknown result')
        end

        def get_candidacies_by_identifiers(headers, request)
          send_get_candidacies_by_identifiers(headers, request)
          return recv_get_candidacies_by_identifiers()
        end

        def send_get_candidacies_by_identifiers(headers, request)
          send_message('get_candidacies_by_identifiers', Get_candidacies_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_candidacies_by_identifiers()
          result = receive_message(Get_candidacies_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_candidacies_by_identifiers failed: unknown result')
        end

        def filter_candidacy_identifiers(headers, request)
          send_filter_candidacy_identifiers(headers, request)
          return recv_filter_candidacy_identifiers()
        end

        def send_filter_candidacy_identifiers(headers, request)
          send_message('filter_candidacy_identifiers', Filter_candidacy_identifiers_args, :headers => headers, :request => request)
        end

        def recv_filter_candidacy_identifiers()
          result = receive_message(Filter_candidacy_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'filter_candidacy_identifiers failed: unknown result')
        end

        def get_served_terms_by_identifiers(headers, request)
          send_get_served_terms_by_identifiers(headers, request)
          return recv_get_served_terms_by_identifiers()
        end

        def send_get_served_terms_by_identifiers(headers, request)
          send_message('get_served_terms_by_identifiers', Get_served_terms_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_served_terms_by_identifiers()
          result = receive_message(Get_served_terms_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_served_terms_by_identifiers failed: unknown result')
        end

        def get_served_terms(headers, request)
          send_get_served_terms(headers, request)
          return recv_get_served_terms()
        end

        def send_get_served_terms(headers, request)
          send_message('get_served_terms', Get_served_terms_args, :headers => headers, :request => request)
        end

        def recv_get_served_terms()
          result = receive_message(Get_served_terms_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_served_terms failed: unknown result')
        end

        def get_races_by_identifiers(headers, request)
          send_get_races_by_identifiers(headers, request)
          return recv_get_races_by_identifiers()
        end

        def send_get_races_by_identifiers(headers, request)
          send_message('get_races_by_identifiers', Get_races_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_races_by_identifiers()
          result = receive_message(Get_races_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_races_by_identifiers failed: unknown result')
        end

        def get_races(headers, request)
          send_get_races(headers, request)
          return recv_get_races()
        end

        def send_get_races(headers, request)
          send_message('get_races', Get_races_args, :headers => headers, :request => request)
        end

        def recv_get_races()
          result = receive_message(Get_races_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_races failed: unknown result')
        end

        def get_elections_by_identifiers(headers, request)
          send_get_elections_by_identifiers(headers, request)
          return recv_get_elections_by_identifiers()
        end

        def send_get_elections_by_identifiers(headers, request)
          send_message('get_elections_by_identifiers', Get_elections_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_elections_by_identifiers()
          result = receive_message(Get_elections_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_elections_by_identifiers failed: unknown result')
        end

        def get_elections(headers, request)
          send_get_elections(headers, request)
          return recv_get_elections()
        end

        def send_get_elections(headers, request)
          send_message('get_elections', Get_elections_args, :headers => headers, :request => request)
        end

        def recv_get_elections()
          result = receive_message(Get_elections_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_elections failed: unknown result')
        end

        def get_districts_for_entity(headers, request)
          send_get_districts_for_entity(headers, request)
          return recv_get_districts_for_entity()
        end

        def send_get_districts_for_entity(headers, request)
          send_message('get_districts_for_entity', Get_districts_for_entity_args, :headers => headers, :request => request)
        end

        def recv_get_districts_for_entity()
          result = receive_message(Get_districts_for_entity_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_districts_for_entity failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_get_bodies(seqid, iprot, oprot)
          args = read_args(iprot, Get_bodies_args)
          result = Get_bodies_result.new()
          begin
            result.success = @handler.get_bodies(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_bodies', seqid)
        end

        def process_get_bodies_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_bodies_by_identifiers_args)
          result = Get_bodies_by_identifiers_result.new()
          begin
            result.success = @handler.get_bodies_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_bodies_by_identifiers', seqid)
        end

        def process_get_political_parties(seqid, iprot, oprot)
          args = read_args(iprot, Get_political_parties_args)
          result = Get_political_parties_result.new()
          begin
            result.success = @handler.get_political_parties(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_political_parties', seqid)
        end

        def process_create_politician(seqid, iprot, oprot)
          args = read_args(iprot, Create_politician_args)
          result = Create_politician_result.new()
          begin
            result.success = @handler.create_politician(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'create_politician', seqid)
        end

        def process_edit_politician(seqid, iprot, oprot)
          args = read_args(iprot, Edit_politician_args)
          result = Edit_politician_result.new()
          begin
            result.success = @handler.edit_politician(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'edit_politician', seqid)
        end

        def process_get_politicians(seqid, iprot, oprot)
          args = read_args(iprot, Get_politicians_args)
          result = Get_politicians_result.new()
          begin
            result.success = @handler.get_politicians(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_politicians', seqid)
        end

        def process_get_politicians_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_politicians_by_identifiers_args)
          result = Get_politicians_by_identifiers_result.new()
          begin
            result.success = @handler.get_politicians_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_politicians_by_identifiers', seqid)
        end

        def process_create_politician_channel(seqid, iprot, oprot)
          args = read_args(iprot, Create_politician_channel_args)
          result = Create_politician_channel_result.new()
          begin
            result.success = @handler.create_politician_channel(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'create_politician_channel', seqid)
        end

        def process_edit_politician_channel(seqid, iprot, oprot)
          args = read_args(iprot, Edit_politician_channel_args)
          result = Edit_politician_channel_result.new()
          begin
            result.success = @handler.edit_politician_channel(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'edit_politician_channel', seqid)
        end

        def process_delete_politician_channel(seqid, iprot, oprot)
          args = read_args(iprot, Delete_politician_channel_args)
          result = Delete_politician_channel_result.new()
          begin
            @handler.delete_politician_channel(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'delete_politician_channel', seqid)
        end

        def process_get_politician_channels(seqid, iprot, oprot)
          args = read_args(iprot, Get_politician_channels_args)
          result = Get_politician_channels_result.new()
          begin
            result.success = @handler.get_politician_channels(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_politician_channels', seqid)
        end

        def process_get_seats_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_seats_by_identifiers_args)
          result = Get_seats_by_identifiers_result.new()
          begin
            result.success = @handler.get_seats_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_seats_by_identifiers', seqid)
        end

        def process_get_seats(seqid, iprot, oprot)
          args = read_args(iprot, Get_seats_args)
          result = Get_seats_result.new()
          begin
            result.success = @handler.get_seats(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_seats', seqid)
        end

        def process_district_entity_by_address(seqid, iprot, oprot)
          args = read_args(iprot, District_entity_by_address_args)
          result = District_entity_by_address_result.new()
          begin
            result.success = @handler.district_entity_by_address(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          rescue ::ThriftShop::CivicData::CivicInformationApiException => civic_information_api_exception
            result.civic_information_api_exception = civic_information_api_exception
          end
          write_result(result, oprot, 'district_entity_by_address', seqid)
        end

        def process_get_districts_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_districts_by_identifiers_args)
          result = Get_districts_by_identifiers_result.new()
          begin
            result.success = @handler.get_districts_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_districts_by_identifiers', seqid)
        end

        def process_get_default_federal_district(seqid, iprot, oprot)
          args = read_args(iprot, Get_default_federal_district_args)
          result = Get_default_federal_district_result.new()
          begin
            result.success = @handler.get_default_federal_district(args.headers, args.request)
          rescue ::ThriftShop::Shared::StateException => state_exception
            result.state_exception = state_exception
          end
          write_result(result, oprot, 'get_default_federal_district', seqid)
        end

        def process_get_candidacies(seqid, iprot, oprot)
          args = read_args(iprot, Get_candidacies_args)
          result = Get_candidacies_result.new()
          begin
            result.success = @handler.get_candidacies(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_candidacies', seqid)
        end

        def process_get_candidacies_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_candidacies_by_identifiers_args)
          result = Get_candidacies_by_identifiers_result.new()
          begin
            result.success = @handler.get_candidacies_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_candidacies_by_identifiers', seqid)
        end

        def process_filter_candidacy_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Filter_candidacy_identifiers_args)
          result = Filter_candidacy_identifiers_result.new()
          begin
            result.success = @handler.filter_candidacy_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'filter_candidacy_identifiers', seqid)
        end

        def process_get_served_terms_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_served_terms_by_identifiers_args)
          result = Get_served_terms_by_identifiers_result.new()
          begin
            result.success = @handler.get_served_terms_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_served_terms_by_identifiers', seqid)
        end

        def process_get_served_terms(seqid, iprot, oprot)
          args = read_args(iprot, Get_served_terms_args)
          result = Get_served_terms_result.new()
          begin
            result.success = @handler.get_served_terms(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_served_terms', seqid)
        end

        def process_get_races_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_races_by_identifiers_args)
          result = Get_races_by_identifiers_result.new()
          begin
            result.success = @handler.get_races_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_races_by_identifiers', seqid)
        end

        def process_get_races(seqid, iprot, oprot)
          args = read_args(iprot, Get_races_args)
          result = Get_races_result.new()
          begin
            result.success = @handler.get_races(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_races', seqid)
        end

        def process_get_elections_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_elections_by_identifiers_args)
          result = Get_elections_by_identifiers_result.new()
          begin
            result.success = @handler.get_elections_by_identifiers(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_elections_by_identifiers', seqid)
        end

        def process_get_elections(seqid, iprot, oprot)
          args = read_args(iprot, Get_elections_args)
          result = Get_elections_result.new()
          begin
            result.success = @handler.get_elections(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          end
          write_result(result, oprot, 'get_elections', seqid)
        end

        def process_get_districts_for_entity(seqid, iprot, oprot)
          args = read_args(iprot, Get_districts_for_entity_args)
          result = Get_districts_for_entity_result.new()
          begin
            result.success = @handler.get_districts_for_entity(args.headers, args.request)
          rescue ::ThriftShop::Shared::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftShop::Shared::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_districts_for_entity', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Get_bodies_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetBodiesRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_bodies_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PaginatedBodies},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_bodies_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetBodiesByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_bodies_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Bodies},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_political_parties_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetPoliticalPartiesRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_political_parties_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PoliticalParties},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_politician_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::CreatePoliticianRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_politician_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Politician},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_politician_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::EditPoliticianRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_politician_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Politician},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_politicians_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetPoliticiansRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_politicians_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PaginatedPoliticians},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_politicians_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetPoliticiansByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_politicians_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Politicians},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_politician_channel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::CreatePoliticianChannelRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_politician_channel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PoliticianChannel},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_politician_channel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::EditPoliticianChannelRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Edit_politician_channel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PoliticianChannel},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_politician_channel_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::DeletePoliticianChannelRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Delete_politician_channel_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_politician_channels_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetPoliticianChannelsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_politician_channels_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PoliticianChannels},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_seats_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetSeatsByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_seats_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Seats},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_seats_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetSeatsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_seats_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PaginatedSeats},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class District_entity_by_address_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::DistrictEntityByAddressRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class District_entity_by_address_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2
        CIVIC_INFORMATION_API_EXCEPTION = 3

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Districts},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException},
          CIVIC_INFORMATION_API_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'civic_information_api_exception', :class => ::ThriftShop::CivicData::CivicInformationApiException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_districts_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetDistrictsByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_districts_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Districts},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_default_federal_district_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetDefaultFederalDistrictRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_default_federal_district_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        STATE_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::District},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftShop::Shared::StateException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_candidacies_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetCandidaciesRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_candidacies_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PaginatedCandidacies},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_candidacies_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetCandidaciesByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_candidacies_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Candidacies},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Filter_candidacy_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::FilterCandidacyIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Filter_candidacy_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::CandidacyUniqueIdentifiers},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_served_terms_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetServedTermsByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_served_terms_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::ServedTerms},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_served_terms_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetServedTermsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_served_terms_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PaginatedServedTerms},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_races_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetRacesByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_races_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Races},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_races_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetRacesRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_races_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PaginatedRaces},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_elections_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetElectionsByIdentifiersRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_elections_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Elections},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_elections_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetElectionsRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_elections_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::PaginatedElections},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_districts_for_entity_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftShop::Shared::RequestHeaders},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftShop::CivicData::GetDistrictsForEntityRequest}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_districts_for_entity_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftShop::CivicData::Districts},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftShop::Shared::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftShop::Shared::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
